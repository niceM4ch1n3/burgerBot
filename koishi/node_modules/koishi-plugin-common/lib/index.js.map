{
  "version": 3,
  "sources": ["../src/index.ts", "../src/basic.ts", "../src/handler.ts", "../src/updater.ts"],
  "sourcesContent": ["import { Context } from 'koishi-core'\nimport basic, { BasicConfig } from './basic'\nimport handler, { HandlerConfig } from './handler'\nimport updater, { UpdaterConfig } from './updater'\n\nexport * from './basic'\nexport * from './handler'\nexport * from './updater'\n\nexport interface Config extends HandlerConfig, BasicConfig, UpdaterConfig {}\n\nexport const name = 'common'\n\nexport function apply(ctx: Context, config: Config = {}) {\n  ctx.command('common', '基础功能')\n\n  ctx.plugin(basic, config)\n  ctx.plugin(handler, config)\n  ctx.plugin(updater, config)\n}\n", "import { Context, Channel, Session, Argv } from 'koishi-core'\nimport { sleep, segment, template, makeArray, Time, simplify } from 'koishi-utils'\n\ntemplate.set('common', {\n  'expect-text': '请输入要发送的文本。',\n  'expect-command': '请输入要触发的指令。',\n  'expect-context': '请提供新的上下文。',\n  'invalid-private-member': '无法在私聊上下文使用 --member 选项。',\n  'feedback-receive': '收到来自 {0} 的反馈信息：\\n{1}',\n  'feedback-success': '反馈信息发送成功！',\n  // eslint-disable-next-line quote-props\n  'relay': '{0}: {1}',\n})\n\nexport function broadcast(ctx: Context) {\n  ctx.select('database')\n    .command('common/broadcast <message:text>', '全服广播', { authority: 4 })\n    .option('forced', '-f  无视 silent 标签进行广播')\n    .option('only', '-o  仅向当前账号负责的群进行广播')\n    .action(async ({ options, session }, message) => {\n      if (!message) return template('common.expect-text')\n      if (!options.only) {\n        await ctx.broadcast(message, options.forced)\n        return\n      }\n\n      const fields: ('id' | 'flag')[] = ['id']\n      if (!options.forced) fields.push('flag')\n      let groups = await ctx.database.getAssignedChannels(fields, { [session.platform]: [session.selfId] })\n      if (!options.forced) {\n        groups = groups.filter(g => !(g.flag & Channel.Flag.silent))\n      }\n      await session.bot.broadcast(groups.map(g => g.id.slice(session.platform['length'] + 1)), message)\n    })\n}\n\nexport function contextify(ctx: Context) {\n  ctx.select('database')\n    .command('common/contextify <command:text>', '在特定上下文中触发指令', { authority: 3 })\n    .alias('ctxf')\n    .userFields(['authority'])\n    .option('user', '-u [id:user]  使用用户私聊上下文')\n    .option('member', '-m [id:user]  使用当前频道成员上下文')\n    .option('channel', '-c [id:channel]  使用群聊上下文')\n    .action(async ({ session, options }, message) => {\n      if (!message) return template('common.expect-command')\n\n      if (options.member) {\n        if (session.subtype === 'private') {\n          return template('common.invalid-private-member')\n        }\n        options.channel = session.cid\n        options.user = options.member\n      }\n\n      if (!options.user && !options.channel) {\n        return template('common.expect-context')\n      }\n\n      const sess = new Session(ctx.app, session)\n      sess.send = session.send.bind(session)\n      sess.sendQueued = session.sendQueued.bind(session)\n\n      if (!options.channel) {\n        sess.subtype = 'private'\n      } else if (options.channel !== session.cid) {\n        sess.channelId = Argv.parsePid(options.channel)[1]\n        sess.cid = `${sess.platform}:${sess.channelId}`\n        sess.subtype = 'group'\n        await sess.observeChannel()\n      } else {\n        sess.channel = session.channel\n      }\n\n      if (options.user && options.user !== session.uid) {\n        sess.userId = sess.author.userId = Argv.parsePid(options.user)[1]\n        sess.uid = `${sess.platform}:${sess.userId}`\n        const user = await sess.observeUser(['authority'])\n        if (session.user.authority <= user.authority) {\n          return template('internal.low-authority')\n        }\n      } else {\n        sess.user = session.user\n      }\n\n      if (options.member) {\n        const info = await session.bot.getGroupMember?.(sess.groupId, sess.userId).catch(() => ({}))\n        Object.assign(sess.author, info)\n      } else if (options.user) {\n        const info = await session.bot.getUser?.(sess.userId).catch(() => ({}))\n        Object.assign(sess.author, info)\n      }\n\n      await sess.execute(message)\n    })\n}\n\nexport function echo(ctx: Context) {\n  ctx.command('common/echo <message:text>', '向当前上下文发送消息', { authority: 2 })\n    .option('anonymous', '-a  匿名发送消息', { authority: 3 })\n    .option('forceAnonymous', '-A  匿名发送消息', { authority: 3 })\n    .option('escape', '-e  发送转义消息', { authority: 3 })\n    .option('user', '-u [user:user]  发送到用户', { authority: 3 })\n    .option('channel', '-c [channel:channel]  发送到频道', { authority: 3 })\n    .action(async ({ options }, message) => {\n      if (!message) return template('common.expect-text')\n\n      if (options.escape) {\n        message = segment.unescape(message)\n      }\n\n      if (options.forceAnonymous) {\n        message = segment('anonymous') + message\n      } else if (options.anonymous) {\n        message = segment('anonymous', { ignore: true }) + message\n      }\n\n      const target = options.user || options.channel\n      if (target) {\n        const [platform] = target.split(':')\n        const id = target.slice(platform.length + 1)\n        const bot = ctx.getBot(platform as never)\n        if (options.user) {\n          await bot.sendPrivateMessage(id, message)\n        } else {\n          await bot.sendMessage(id, message, 'unknown')\n        }\n        return\n      }\n\n      return message\n    })\n}\n\nexport function feedback(ctx: Context, operators: string[]) {\n  type FeedbackData = [sid: string, channelId: string, groupId: string]\n  const feedbacks: Record<number, FeedbackData> = {}\n\n  ctx.command('common/feedback <message:text>', '发送反馈信息给作者')\n    .userFields(['name', 'id'])\n    .action(async ({ session }, text) => {\n      if (!text) return template('common.expect-text')\n      const { username: name, userId } = session\n      const nickname = name === '' + userId ? userId : `${name} (${userId})`\n      const message = template('common.feedback-receive', nickname, text)\n      const delay = ctx.app.options.delay.broadcast\n      const data: FeedbackData = [session.sid, session.channelId, session.groupId]\n      for (let index = 0; index < operators.length; ++index) {\n        if (index && delay) await sleep(delay)\n        const [platform, userId] = Argv.parsePid(operators[index])\n        const id = await ctx.getBot(platform).sendPrivateMessage(userId, message)\n        feedbacks[id] = data\n      }\n      return template('common.feedback-success')\n    })\n\n  ctx.middleware((session, next) => {\n    const { quote, parsed } = session\n    if (!parsed.content || !quote) return next()\n    const data = feedbacks[quote.messageId]\n    if (!data) return next()\n    return ctx.bots[data[0]].sendMessage(data[1], parsed.content, data[2])\n  })\n}\n\nexport interface RecallConfig {\n  recall?: number\n}\n\nexport function recall(ctx: Context, { recall = 10 }: RecallConfig) {\n  ctx = ctx.group()\n  const recent: Record<string, string[]> = {}\n\n  ctx.on('send', (session) => {\n    const list = recent[session.channelId] ||= []\n    list.unshift(session.messageId)\n    if (list.length > recall) {\n      list.pop()\n    }\n  })\n\n  ctx.command('common/recall [count:number]', '撤回 bot 发送的消息', { authority: 2 })\n    .action(async ({ session }, count = 1) => {\n      const list = recent[session.channelId]\n      if (!list) return '近期没有发送消息。'\n      const removal = list.splice(0, count)\n      const delay = ctx.app.options.delay.broadcast\n      if (!list.length) delete recent[session.channelId]\n      for (let index = 0; index < removal.length; index++) {\n        if (index && delay) await sleep(delay)\n        try {\n          await session.bot.deleteMessage(session.channelId, removal[index])\n        } catch (error) {\n          ctx.logger('bot').warn(error)\n        }\n      }\n    })\n}\n\ninterface RelayOptions {\n  source: string\n  destination: string\n  selfId?: string\n  lifespan?: number\n}\n\nexport function relay(ctx: Context, relays: RelayOptions[]) {\n  const relayMap: Record<string, RelayOptions> = {}\n\n  async function sendRelay(session: Session, { destination, selfId, lifespan = Time.hour }: RelayOptions) {\n    const [platform, channelId] = Argv.parsePid(destination)\n    const bot = ctx.getBot(platform, selfId)\n    if (!session.parsed.content) return\n    const content = template('common.relay', session.username, session.parsed.content)\n    const id = await bot.sendMessage(channelId, content, 'unknown')\n    relayMap[id] = { source: destination, destination: session.cid, selfId: session.selfId, lifespan }\n    setTimeout(() => delete relayMap[id], lifespan)\n  }\n\n  ctx.middleware((session, next) => {\n    const { quote = {} } = session\n    const data = relayMap[quote.messageId]\n    if (data) return sendRelay(session, data)\n    const tasks: Promise<void>[] = []\n    for (const options of relays) {\n      if (session.cid !== options.source) continue\n      tasks.push(sendRelay(session, options).catch())\n    }\n    tasks.push(next())\n    return Promise.all(tasks)\n  })\n}\n\nexport interface Respondent {\n  match: string | RegExp\n  reply: string | ((...capture: string[]) => string)\n}\n\nexport function respondent(ctx: Context, respondents: Respondent[]) {\n  ctx.middleware((session, next) => {\n    const message = simplify(session.content)\n    for (const { match, reply } of respondents) {\n      const capture = typeof match === 'string' ? message === match && [message] : message.match(match)\n      if (capture) return session.send(typeof reply === 'string' ? reply : reply(...capture))\n    }\n    return next()\n  })\n}\n\nexport interface BasicConfig extends RecallConfig {\n  echo?: boolean\n  broadcast?: boolean\n  contextify?: boolean\n  operator?: string | string[]\n  relay?: RelayOptions | RelayOptions[]\n  respondent?: Respondent | Respondent[]\n}\n\nexport default function apply(ctx: Context, config: BasicConfig = {}) {\n  if (config.broadcast !== false) ctx.plugin(broadcast)\n  if (config.contextify !== false) ctx.plugin(contextify)\n  if (config.echo !== false) ctx.plugin(echo)\n  if (!(config.recall <= 0)) ctx.plugin(recall, config)\n\n  const operators = makeArray(config.operator)\n  if (operators.length) ctx.plugin(feedback, operators)\n\n  const relays = makeArray(config.relay)\n  if (relays.length) ctx.plugin(relay, relays)\n\n  const respondents = makeArray(config.respondent)\n  if (respondents.length) ctx.plugin(respondent, respondents)\n}\n", "import { Context, Session, Random, Awaitable } from 'koishi-core'\n\ndeclare module 'koishi-core' {\n  interface EventMap {\n    'repeater'(session: Session, state: RepeatState): void\n  }\n}\n\ninterface RepeatState {\n  content: string\n  repeated: boolean\n  times: number\n  users: Record<string, number>\n}\n\ntype StateCallback = (state: RepeatState, session: Session) => void | string\n\ninterface RepeatHandler {\n  minTimes: number\n  probability?: number\n}\n\nfunction onRepeat(options: RepeatHandler | StateCallback): StateCallback {\n  if (!options || typeof options !== 'object') return options as StateCallback\n  const { minTimes, probability = 1 } = options\n  return ({ repeated, times, content }) => times >= minTimes && !repeated && Random.bool(probability) ? content : ''\n}\n\nexport interface RepeaterConfig {\n  onRepeat?: RepeatHandler | StateCallback\n  onInterrupt?: StateCallback\n}\n\nexport function repeater(ctx: Context, config: RepeaterConfig = {}) {\n  ctx = ctx.group()\n\n  const states: Record<string, RepeatState> = {}\n\n  function getState(id: string) {\n    return states[id] || (states[id] = {\n      content: '',\n      repeated: false,\n      times: 0,\n      users: {},\n    })\n  }\n\n  ctx.before('send', ({ cid, content }) => {\n    const state = getState(cid)\n    state.repeated = true\n    if (state.content === content) {\n      state.times += 1\n    } else {\n      state.content = content\n      state.times = 1\n      state.users = {}\n    }\n  })\n\n  ctx.middleware((session, next) => {\n    const { content, uid, userId } = session\n\n    // never respond to messages from self\n    if (ctx.bots[uid]) return\n\n    const state = getState(session.cid)\n    const check = (handle: StateCallback) => {\n      const text = handle?.(state, session)\n      return text && next(() => {\n        ctx.emit('repeater', session, state)\n        return session.send(text)\n      })\n    }\n\n    // duplicate repeating & normal repeating\n    if (content === state.content) {\n      state.times += 1\n      state.users[userId] = (state.users[userId] || 0) + 1\n      return check(onRepeat(config.onRepeat)) || next()\n    }\n\n    // interrupt repeating\n    const result = check(config.onInterrupt)\n    if (result) return result\n\n    // unrepeated message\n    state.content = content\n    state.repeated = false\n    state.times = 1\n    state.users = { [userId]: 1 }\n    return next()\n  })\n}\n\ntype RequestHandler = string | boolean | ((session: Session) => Awaitable<string | boolean | void>)\n\nasync function getHandlerResult(handler: RequestHandler, session: Session, prefer: boolean): Promise<[boolean, string?]> {\n  const result = typeof handler === 'function' ? await handler(session) : handler\n  if (typeof result === 'string') {\n    return [prefer, result]\n  } else if (typeof result === 'boolean') {\n    return [result]\n  }\n}\n\nexport interface VerifierConfig {\n  onFriendRequest?: RequestHandler\n  onGroupMemberRequest?: RequestHandler\n  onGroupRequest?: RequestHandler\n}\n\nexport function verifier(ctx: Context, config: VerifierConfig = {}) {\n  ctx.on('friend-request', async (session) => {\n    const result = await getHandlerResult(config.onFriendRequest, session, true)\n    if (result) return session.bot.handleFriendRequest(session.messageId, ...result)\n  })\n\n  ctx.on('group-request', async (session) => {\n    const result = await getHandlerResult(config.onGroupRequest, session, false)\n    if (result) return session.bot.handleGroupRequest(session.messageId, ...result)\n  })\n\n  ctx.on('group-member-request', async (session) => {\n    const result = await getHandlerResult(config.onGroupMemberRequest, session, false)\n    if (result) return session.bot.handleGroupMemberRequest(session.messageId, ...result)\n  })\n}\n\nexport interface HandlerConfig extends RepeaterConfig, VerifierConfig {}\n\nexport default function apply(ctx: Context, config?: HandlerConfig) {\n  ctx.plugin(repeater, config)\n  ctx.plugin(verifier, config)\n}\n", "import { difference, observe, Time, enumKeys, Random, template, deduplicate, intersection, Awaitable } from 'koishi-utils'\nimport { Context, User, Channel, Command, Argv, Platform, Session, Extend } from 'koishi-core'\n\ntype AdminAction<U extends User.Field, G extends Channel.Field, A extends any[], O extends {}, T>\n  = (argv: Argv<U | 'authority', G, A, Extend<O, 'target', string>> & { target: T }, ...args: A)\n    => Awaitable<void | string>\n\ndeclare module 'koishi-core' {\n  interface Command<U, G, A, O> {\n    adminUser(callback: AdminAction<U, G, A, O, User.Observed<U | 'authority'>>, autoCreate?: boolean): this\n    adminChannel(callback: AdminAction<U, G, A, O, Channel.Observed<G>>, autoCreate?: boolean): this\n  }\n\n  interface EventMap {\n    'common/callme'(name: string, session: Session): string | void\n  }\n}\n\n/* eslint-disable quote-props */\ntemplate.set('admin', {\n  // flag\n  'unknown-flag': '未找到标记 {0}。',\n  'all-flags': '全部标记为：{0}。',\n  'no-flags': '未设置任何标记。',\n  'current-flags': '当前的标记为：{0}。',\n\n  // admin helper\n  'user-expected': '请指定目标用户。',\n  'user-not-found': '未找到指定的用户。',\n  'user-unchanged': '用户数据未改动。',\n  'user-updated': '用户数据已修改。',\n  'channel-not-found': '未找到指定的频道。',\n  'channel-unchanged': '频道数据未改动。',\n  'channel-updated': '频道数据已修改。',\n  'invalid-assignee-platform': '代理者应与目标频道属于同一平台。',\n  'not-in-group': '当前不在群组上下文中，请使用 -t 参数指定目标频道。',\n})\n\ntemplate.set('callme', {\n  'current': '好的呢，{0}！',\n  'unnamed': '你还没有给自己起一个称呼呢~',\n  'unchanged': '称呼未发生变化。',\n  'empty': '称呼不能为空。',\n  'invalid': '称呼中禁止包含纯文本以外的内容。',\n  'duplicate': '禁止与其他用户重名。',\n  'updated': '好的，{0}，请多指教！',\n  'failed': '修改称呼失败。',\n})\n\ntemplate.set('bind', {\n  'generated-1': [\n    'bind 指令可用于在多个平台间绑定用户数据。绑定过程中，源平台的用户数据将完全保留，而目标平台的用户数据将被源平台的数据所覆盖。',\n    '请确认当前平台是你的目标平台，并在 5 分钟内使用你的账号在源平台内向机器人发送以下文本：',\n    '{0}',\n    '注意：每个账号只能绑定到每个平台一次，此操作将会抹去你当前平台上的数据，请谨慎操作！',\n  ].join('\\n'),\n  'generated-2': [\n    '令牌核验成功！下面将进行第二步操作。',\n    '请在 5 分钟内使用你的账号在目标平台内向机器人发送以下文本：',\n    '{0}',\n    '注意：当前平台是你的源平台，这里的用户数据将完全保留，而目标平台的用户数据将被覆盖，请谨慎操作！',\n  ].join('\\n'),\n  'failed': '账号绑定失败：你已经绑定过该平台。',\n  'success': '账号绑定成功！',\n})\n\ntemplate.set('usage', {\n  'present': '今日 {0} 功能的调用次数为：{1}',\n  'list': '今日各功能的调用次数为：',\n  'none': '今日没有调用过消耗次数的功能。',\n})\n\ntemplate.set('timer', {\n  'present': '定时器 {0} 的生效时间为：剩余 {1}',\n  'absent': '定时器 {0} 当前并未生效。',\n  'list': '各定时器的生效时间为：',\n  'none': '当前没有生效的定时器。',\n})\n\ntemplate.set('switch', {\n  'forbidden': '您无权修改 {0} 功能。',\n  'list': '当前禁用的功能有：{0}',\n  'none': '当前没有禁用功能。',\n})\n\ninterface FlagOptions {\n  list?: boolean\n  set?: boolean\n  unset?: boolean\n}\n\ntype FlagMap = Record<string, number> & Record<number, string>\n\ninterface FlagArgv extends Argv<never, never, string[], FlagOptions> {\n  target: User.Observed<'flag'> | Channel.Observed<'flag'>\n}\n\nfunction flagAction(map: any, { target, options }: FlagArgv, ...flags: string[]): string\nfunction flagAction(map: FlagMap, { target, options }: FlagArgv, ...flags: string[]) {\n  if (options.set || options.unset) {\n    const notFound = difference(flags, enumKeys(map))\n    if (notFound.length) return template('admin.unknown-flag', notFound.join(', '))\n    for (const name of flags) {\n      options.set ? target.flag |= map[name] : target.flag &= ~map[name]\n    }\n    return\n  }\n\n  if (options.list) {\n    return template('admin.all-flags', enumKeys(map).join(', '))\n  }\n\n  let flag = target.flag\n  const keys: string[] = []\n  while (flag) {\n    const value = 2 ** Math.floor(Math.log2(flag))\n    flag -= value\n    keys.unshift(map[value])\n  }\n  if (!keys.length) return template('admin.no-flags')\n  return template('admin.current-flags', keys.join(', '))\n}\n\nCommand.prototype.adminUser = function (this: Command, callback, autoCreate) {\n  this.config.checkUnknown = true\n\n  const command = this\n    .userFields(['authority'])\n    .option('target', '-t [user:user]  指定目标用户', { authority: 3 })\n    .userFields(({ session, options }, fields) => {\n      const platform = options.target ? options.target.split(':')[0] : session.platform\n      fields.add(platform as Platform)\n    })\n\n  command.action(async (argv) => {\n    const { options, args, session: { user, database } } = argv\n    const fields = argv.session.collect('user', argv)\n    let target: User.Observed, session = argv.session\n    if (!options.target) {\n      target = await argv.session.observeUser(fields)\n    } else {\n      const [platform, userId] = Argv.parsePid(options.target)\n      if (user[platform] === userId) {\n        target = await argv.session.observeUser(fields)\n      } else {\n        const data = await database.getUser(platform, userId, [...fields])\n        if (!data) {\n          if (!autoCreate) return template('admin.user-not-found')\n          const fallback = observe(User.create(platform, userId), async () => {\n            if (!fallback.authority) return\n            await database.createUser(platform, userId, fallback)\n          })\n          target = fallback\n        } else if (user.authority <= data.authority) {\n          return template('internal.low-authority')\n        } else {\n          target = observe(data, diff => database.setUser(platform, userId, diff), `user ${options.target}`)\n          if (!autoCreate) {\n            session = Object.create(argv.session)\n            session.user = target\n            session.uid = options.target\n            session.userId = userId\n            session.platform = platform\n          }\n        }\n      }\n    }\n    const diffKeys = Object.keys(target._diff)\n    const result = await callback({ ...argv, target, session }, ...args)\n    if (typeof result === 'string') return result\n    if (!difference(Object.keys(target._diff), diffKeys).length) {\n      return template('admin.user-unchanged')\n    }\n    await target._update()\n    return template('admin.user-updated')\n  })\n\n  return command\n}\n\nCommand.prototype.adminChannel = function (this: Command, callback, autoCreate) {\n  this.config.checkUnknown = true\n\n  const command = this\n    .userFields(['authority'])\n    .option('target', '-t [channel:channel]  指定目标频道', { authority: 3 })\n\n  command.action(async (argv, ...args) => {\n    const { options, session: { cid, subtype, database } } = argv\n    const fields = argv.session.collect('channel', argv)\n    let target: Channel.Observed, session = argv.session\n    if ((!options.target || options.target === cid) && subtype === 'group') {\n      target = await argv.session.observeChannel(fields)\n    } else if (options.target) {\n      const [platform, channelId] = Argv.parsePid(options.target)\n      const data = await database.getChannel(platform, channelId, [...fields])\n      if (!data) {\n        if (!autoCreate) return template('admin.channel-not-found')\n        const fallback = observe(Channel.create(platform, channelId), async () => {\n          if (!fallback.assignee) return\n          await database.createChannel(platform, channelId, fallback)\n        })\n        target = fallback\n      } else {\n        target = observe(data, diff => database.setChannel(platform, channelId, diff), `channel ${options.target}`)\n        if (!autoCreate) {\n          session = Object.create(argv.session)\n          session.channel = target\n          session.cid = options.target\n          session.channelId = channelId\n          session.platform = platform\n        }\n      }\n    } else {\n      return template('admin.not-in-group')\n    }\n    const result = await callback({ ...argv, target, session }, ...args)\n    if (typeof result === 'string') return result\n    if (!Object.keys(target._diff).length) {\n      return template('admin.channel-unchanged')\n    }\n    await target._update()\n    return template('admin.channel-updated')\n  })\n\n  return command\n}\n\nexport function callme(ctx: Context) {\n  ctx = ctx.select('database')\n\n  ctx.command('common/callme [name:text]', '修改自己的称呼')\n    .userFields(['id', 'name'])\n    .shortcut('叫我', { prefix: true, fuzzy: true })\n    .action(async ({ session }, name) => {\n      const { user } = session\n      if (!name) {\n        if (user.name) {\n          return template('callme.current', session.username)\n        } else {\n          return template('callme.unnamed')\n        }\n      } else if (name === user.name) {\n        return template('callme.unchanged')\n      } else if (!(name = name.trim())) {\n        return template('callme.empty')\n      } else if (name.includes('[CQ:')) {\n        return template('callme.invalid')\n      }\n\n      const result = ctx.bail('common/callme', name, session)\n      if (result) return result\n\n      try {\n        user.name = name\n        await user._update()\n        return template('callme.updated', session.username)\n      } catch (error) {\n        if (error[Symbol.for('koishi.error-type')] === 'duplicate-entry') {\n          return template('callme.duplicate')\n        } else {\n          ctx.logger('common').warn(error)\n          return template('callme.failed')\n        }\n      }\n    })\n}\n\nexport interface BindConfig {\n  generateToken?: () => string\n}\n\nexport function bind(ctx: Context, config: BindConfig = {}) {\n  ctx = ctx.select('database')\n\n  // 1: group (1st step)\n  // 0: private\n  // -1: group (2nd step)\n  type TokenData = [platform: Platform, id: string, pending: number]\n  const tokens: Record<string, TokenData> = {}\n\n  const { generateToken = () => 'koishi/' + Random.uuid() } = config\n\n  function generate(session: Session, pending: number) {\n    const token = generateToken()\n    tokens[token] = [session.platform, session.userId, pending]\n    setTimeout(() => delete tokens[token], 5 * Time.minute)\n    return token\n  }\n\n  async function bind(user: User.Observed<never>, platform: Platform, userId: string) {\n    await ctx.database.remove('user', { [platform]: [userId] })\n    ctx.app._userCache[platform].set(userId, user)\n    user[platform] = userId as never\n    await user._update()\n  }\n\n  ctx.command('common/bind', '绑定到账号', { authority: 0 })\n    .action(({ session }) => {\n      const token = generate(session, +(session.subtype === 'group'))\n      return template('bind.generated-1', token)\n    })\n\n  ctx.middleware(async (session, next) => {\n    const data = tokens[session.content]\n    if (!data) return next()\n    if (data[2] < 0) {\n      const sess = new Session(ctx.app, { ...session, platform: data[0], userId: data[1] })\n      const user = await sess.observeUser([session.platform])\n      delete tokens[session.content]\n      await bind(user, session.platform, session.userId)\n      return session.send(template('bind.success'))\n    } else {\n      const user = await session.observeUser(['authority', data[0]])\n      if (!user.authority) return session.send(template('internal.low-authority'))\n      if (user[data[0]]) return session.send(template('bind.failed'))\n      delete tokens[session.content]\n      if (data[2]) {\n        const token = generate(session, -1)\n        return session.send(template('bind.generated-2', token))\n      } else {\n        await bind(user, data[0], data[1])\n        return session.send(template('bind.success'))\n      }\n    }\n  }, true)\n}\n\nexport function admin(ctx: Context) {\n  ctx = ctx.select('database')\n\n  ctx.command('common/user', '用户管理', { authority: 3 })\n  ctx.command('common/channel', '频道管理', { authority: 3 })\n\n  ctx.command('user/authorize <value:natural>', '权限信息', { authority: 4 })\n    .alias('auth')\n    .adminUser(async ({ session, target }, authority) => {\n      if (session.userId === target[session.platform]) return template('admin.user-expected')\n      if (authority >= session.user.authority) return template('internal.low-authority')\n      if (authority === target.authority) return template('admin.user-unchanged')\n      target.authority = authority\n    }, true)\n\n  ctx.command('user.flag [-s|-S] [...flags]', '标记信息', { authority: 3 })\n    .userFields(['flag'])\n    .option('list', '-l  标记列表')\n    .option('set', '-s  添加标记', { authority: 4 })\n    .option('unset', '-S  删除标记', { authority: 4 })\n    .adminUser(flagAction.bind(null, User.Flag))\n\n  ctx.command('user.usage [key] [value:posint]', '调用次数信息', { authority: 1 })\n    .userFields(['usage'])\n    .option('set', '-s  设置调用次数', { authority: 4 })\n    .option('clear', '-c  清空调用次数', { authority: 4 })\n    .adminUser(({ target, options }, name, count) => {\n      if (options.clear) {\n        name ? delete target.usage[name] : target.usage = {}\n        return\n      }\n\n      if (options.set) {\n        if (!count) return template('internal.insufficient-arguments')\n        target.usage[name] = count\n        return\n      }\n\n      if (name) return template('usage.present', name, target.usage[name] || 0)\n      const output: string[] = []\n      for (const name of Object.keys(target.usage).sort()) {\n        if (name.startsWith('$')) continue\n        output.push(`${name}：${target.usage[name]}`)\n      }\n      if (!output.length) return template('usage.none')\n      output.unshift(template('usage.list'))\n      return output.join('\\n')\n    })\n\n  ctx.command('user.timer [key] [value:date]', '定时器信息', { authority: 1 })\n    .userFields(['timers'])\n    .option('set', '-s  设置定时器', { authority: 4 })\n    .option('clear', '-c  清空定时器', { authority: 4 })\n    .adminUser(({ target, options }, name, value) => {\n      if (options.clear) {\n        name ? delete target.timers[name] : target.timers = {}\n        return\n      }\n\n      if (options.set) {\n        if (!value) return template('internal.insufficient-arguments')\n        target.timers[name] = +value\n        return\n      }\n\n      const now = Date.now()\n      if (name) {\n        const delta = target.timers[name] - now\n        if (delta > 0) return template('timer.present', name, Time.formatTime(delta))\n        return template('timer.absent', name)\n      }\n      const output: string[] = []\n      for (const name of Object.keys(target.timers).sort()) {\n        if (name.startsWith('$')) continue\n        output.push(`${name}：剩余 ${Time.formatTime(target.timers[name] - now)}`)\n      }\n      if (!output.length) return template('timer.none')\n      output.unshift(template('timer.list'))\n      return output.join('\\n')\n    })\n\n  ctx.command('channel/assign [bot:user]', '受理者账号', { authority: 4 })\n    .channelFields(['assignee'])\n    .option('noTarget', '-T  移除受理者')\n    .adminChannel(async ({ session, options, target }, value) => {\n      if (options.noTarget) {\n        target.assignee = ''\n      } else if (!value) {\n        target.assignee = session.selfId\n      } else {\n        const [platform, userId] = Argv.parsePid(value)\n        if (platform !== Argv.parsePid(options.target)[0]) {\n          return template('admin.invalid-assignee-platform')\n        }\n        target.assignee = userId\n      }\n    }, true)\n\n  ctx.command('channel/switch <command...>', '启用和禁用功能', { authority: 3 })\n    .channelFields(['disable'])\n    .userFields(['authority'])\n    .adminChannel(async ({ session, target }, ...names: string[]) => {\n      if (!names.length) {\n        if (!target.disable.length) return template('switch.none')\n        return template('switch.list', target.disable.join(', '))\n      }\n\n      names = deduplicate(names)\n      const forbidden = names.filter((name) => {\n        const command = ctx.app._commands.get(name)\n        return command && command.config.authority >= session.user.authority\n      })\n      if (forbidden.length) return template('switch.forbidden', forbidden.join(', '))\n\n      const add = difference(names, target.disable)\n      const remove = intersection(names, target.disable)\n      const preserve = difference(target.disable, names)\n      const output: string[] = []\n      if (add.length) output.push(`禁用 ${add.join(', ')} 功能`)\n      if (remove.length) output.push(`启用 ${remove.join(', ')} 功能`)\n      target.disable = [...preserve, ...add]\n      await target._update()\n      return `已${output.join('，')}。`\n    })\n\n  ctx.command('channel.flag [-s|-S] [...flags]', '标记信息', { authority: 3 })\n    .channelFields(['flag'])\n    .option('list', '-l  标记列表')\n    .option('set', '-s  添加标记', { authority: 4 })\n    .option('unset', '-S  删除标记', { authority: 4 })\n    .adminChannel(flagAction.bind(null, Channel.Flag))\n}\n\nexport interface UpdaterConfig extends BindConfig {\n  admin?: boolean\n  bind?: boolean\n  callme?: boolean\n}\n\nexport default function apply(ctx: Context, config: UpdaterConfig = {}) {\n  if (config.admin !== false) ctx.plugin(admin)\n  if (config.bind !== false) ctx.plugin(bind, config)\n  if (config.callme !== false) ctx.plugin(callme)\n}\n"],
  "mappings": "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",
  "names": []
}

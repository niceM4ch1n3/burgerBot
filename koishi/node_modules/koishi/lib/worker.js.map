{
  "version": 3,
  "sources": ["../src/worker.ts"],
  "sourcesContent": ["import { App, BotOptions, Context, Plugin, version } from 'koishi-core'\nimport { resolve, relative, extname, dirname } from 'path'\nimport { coerce, Logger, noop, LogLevelConfig, makeArray, template } from 'koishi-utils'\nimport { readFileSync, readdirSync } from 'fs'\nimport { performance } from 'perf_hooks'\nimport { yellow } from 'kleur'\nimport { AppConfig } from '..'\n\nconst logger = new Logger('app')\nlet configDir = process.cwd()\n\nfunction handleException(error: any) {\n  logger.error(error)\n  process.exit(1)\n}\n\nprocess.on('uncaughtException', handleException)\n\nlet configFile: string, configExt: string\nconst basename = 'koishi.config'\nif (process.env.KOISHI_CONFIG_FILE) {\n  configFile = resolve(configDir, process.env.KOISHI_CONFIG_FILE)\n  configExt = extname(configFile)\n  configDir = dirname(configFile)\n} else {\n  const files = readdirSync(configDir)\n  configExt = ['.js', '.json', '.ts', '.coffee', '.yaml', '.yml'].find(ext => files.includes(basename + ext))\n  if (!configExt) {\n    throw new Error(`config file not found. use ${yellow('koishi init')} command to initialize a config file.`)\n  }\n  configFile = configDir + '/' + basename + configExt\n}\n\nfunction loadConfig() {\n  if (['.yaml', '.yml'].includes(configExt)) {\n    const { load } = require('js-yaml') as typeof import('js-yaml')\n    return load(readFileSync(configFile, 'utf8')) as any\n  } else {\n    const exports = require(configFile)\n    return exports.__esModule ? exports.default : exports\n  }\n}\n\nfunction isErrorModule(error: any) {\n  return error.code !== 'MODULE_NOT_FOUND' || error.requireStack && error.requireStack[0] !== __filename\n}\n\nconst cache: Record<string, [string, any]> = {}\n\nfunction loadEcosystem(type: string, name: string) {\n  const key = `${type}:${name}`\n  if (key in cache) return cache[key]\n\n  const prefix = `koishi-${type}-`\n  const modules: string[] = []\n  if ('./'.includes(name[0])) {\n    // absolute or relative path\n    modules.push(resolve(configDir, name))\n  } else if (name.includes(prefix)) {\n    // full package path\n    modules.push(name)\n  } else if (name[0] === '@') {\n    // scope package path\n    const index = name.lastIndexOf('/')\n    modules.push(name.slice(0, index + 1) + prefix + name.slice(index + 1), name)\n  } else {\n    // normal package path\n    modules.push(prefix + name, name)\n  }\n\n  for (const path of modules) {\n    logger.debug('resolving %c', path)\n    try {\n      const result = require(path)\n      logger.info('apply %s %c', type, result.name || name)\n      return cache[key] = [path, result]\n    } catch (error) {\n      if (isErrorModule(error)) {\n        throw error\n      }\n    }\n  }\n  throw new Error(`cannot resolve ${type} ${name}`)\n}\n\nfunction ensureBaseLevel(config: LogLevelConfig, base: number) {\n  config.base ??= base\n  Object.values(config).forEach((value) => {\n    if (typeof value !== 'object') return\n    ensureBaseLevel(value, config.base)\n  })\n}\n\nconst config: AppConfig = loadConfig()\n\n// configurate logger levels\nif (typeof config.logLevel === 'object') {\n  Logger.levels = config.logLevel as any\n} else if (typeof config.logLevel === 'number') {\n  Logger.levels.base = config.logLevel\n}\n\nif (config.logTime === true) config.logTime = 'yyyy/MM/dd hh:mm:ss'\nif (config.logTime) Logger.showTime = config.logTime\n\n// cli options have higher precedence\nif (process.env.KOISHI_LOG_LEVEL) {\n  Logger.levels.base = +process.env.KOISHI_LOG_LEVEL\n}\n\nensureBaseLevel(Logger.levels, 2)\n\nif (process.env.KOISHI_DEBUG) {\n  for (const name of process.env.KOISHI_DEBUG.split(',')) {\n    new Logger(name).level = Logger.DEBUG\n  }\n}\n\ninterface Message {\n  type: 'send'\n  body: any\n}\n\nprocess.on('message', (data: Message) => {\n  if (data.type === 'send') {\n    const { channelId, groupId, sid, message } = data.body\n    const bot = app.bots[sid]\n    bot.sendMessage(channelId, message, groupId)\n  }\n})\n\nfunction loadAdapter(bot: BotOptions) {\n  const [name] = bot.type.split(':', 1)\n  loadEcosystem('adapter', name)\n}\n\n// load adapter\nif (config.type) {\n  loadAdapter(config)\n} else {\n  config.bots.forEach(loadAdapter)\n}\n\nconst app = new App(config)\n\nconst { exitCommand, autoRestart = true } = config.deamon || {}\n\nconst handleSignal = (signal: NodeJS.Signals) => {\n  new Logger('app').info(`terminated by ${signal}`)\n  app.parallel('exit', signal).finally(() => process.exit())\n}\n\ntemplate.set('deamon', {\n  exiting: '正在关机……',\n  restarting: '正在重启……',\n  restarted: '已成功重启。',\n})\n\nexitCommand && app\n  .command(exitCommand === true ? 'exit' : exitCommand, '停止机器人运行', { authority: 4 })\n  .option('restart', '-r  重新启动')\n  .shortcut('关机', { prefix: true })\n  .shortcut('重启', { prefix: true, options: { restart: true } })\n  .action(async ({ options, session }) => {\n    const { channelId, groupId, sid } = session\n    if (!options.restart) {\n      await session.send(template('deamon.exiting')).catch(noop)\n      process.exit()\n    }\n    process.send({ type: 'queue', body: { channelId, groupId, sid, message: template('deamon.restarted') } })\n    await session.send(template('deamon.restarting')).catch(noop)\n    process.exit(114)\n  })\n\nconst selectors = ['user', 'group', 'channel', 'self', 'private', 'platform'] as const\n\ntype SelectorType = typeof selectors[number]\ntype SelectorValue = boolean | string | number | (string | number)[]\ntype BaseSelection = { [K in SelectorType as `$${K}`]: SelectorValue }\n\ninterface Selection extends BaseSelection {\n  $union: Selection[]\n  $except: Selection\n}\n\nfunction createContext(options: Selection) {\n  let ctx: Context = app\n\n  // basic selectors\n  for (const type of selectors) {\n    const value = options[`$${type}`] as SelectorValue\n    if (value === true) {\n      ctx = ctx[type]()\n    } else if (value === false) {\n      ctx = ctx[type].except()\n    } else if (value !== undefined) {\n      // we turn everything into string\n      ctx = ctx[type](...makeArray(value).map(item => '' + item as never))\n    }\n  }\n\n  // union\n  if (options.$union) {\n    let ctx2: Context = app\n    for (const selection of options.$union) {\n      ctx2 = ctx2.union(createContext(selection))\n    }\n    ctx = ctx.intersect(ctx2)\n  }\n\n  // except\n  if (options.$except) {\n    ctx = ctx.except(createContext(options.$except))\n  }\n\n  return ctx\n}\n\n// load plugins\nconst plugins = new Set<string>()\nconst pluginEntries: [string, any?][] = Array.isArray(config.plugins)\n  ? config.plugins.map(item => Array.isArray(item) ? item : [item])\n  : Object.entries(config.plugins || {})\nfor (const [name, options] of pluginEntries) {\n  const [path, plugin] = loadEcosystem('plugin', name)\n  plugins.add(require.resolve(path))\n  createContext(options).plugin(plugin, options)\n}\n\nprocess.on('unhandledRejection', (error) => {\n  logger.warn(error)\n})\n\napp.start().then(() => {\n  logger.info('%C', `Koishi/${version}`)\n\n  app.bots.forEach(bot => {\n    logger.info('logged in to %s as %c (%s)', bot.platform, bot.username, bot.selfId)\n  })\n\n  const time = Math.max(0, performance.now() - +process.env.KOISHI_START_TIME).toFixed()\n  logger.success(`bot started successfully in ${time} ms`)\n  Logger.timestamp = Date.now()\n  Logger.showDiff = config.logDiff ?? !Logger.showTime\n\n  process.send({ type: 'start', body: { autoRestart } })\n  createWatcher()\n\n  process.on('SIGINT', handleSignal)\n  process.on('SIGTERM', handleSignal)\n}, handleException)\n\nfunction loadDependencies(filename: string, ignored: Set<string>) {\n  const dependencies = new Set<string>()\n  function traverse({ filename, children }: NodeModule) {\n    if (ignored.has(filename) || dependencies.has(filename) || filename.includes('/node_modules/')) return\n    dependencies.add(filename)\n    children.forEach(traverse)\n  }\n  traverse(require.cache[filename])\n  return dependencies\n}\n\nfunction createWatcher() {\n  if (process.env.KOISHI_WATCH_ROOT === undefined && !config.watch) return\n\n  const { watch } = require('chokidar') as typeof import('chokidar')\n  const { root = '', ignored = [], fullReload } = config.watch || {}\n  const watchRoot = resolve(configDir, process.env.KOISHI_WATCH_ROOT ?? root)\n  const watcher = watch(watchRoot, {\n    ...config.watch,\n    ignored: ['**/node_modules/**', '**/.git/**', ...ignored],\n  })\n\n  /**\n   * changes from externals E will always trigger a full reload\n   *\n   * - root R -> external E -> none of plugin Q\n   */\n  const externals = loadDependencies(__filename, plugins)\n\n  const logger = new Logger('app:watcher')\n  function triggerFullReload() {\n    if (fullReload === false) return\n    logger.info('trigger full reload')\n    process.exit(114)\n  }\n\n  /**\n   * files X that should not be marked as declined\n   *\n   * - including all changes C\n   * - some change C -> file X -> some change D\n   */\n  let stashed = new Set<string>()\n  let currentUpdate: Promise<void>\n\n  function flushChanges() {\n    const tasks: Promise<void>[] = []\n    const reloads = new Map<Plugin.State, string>()\n\n    /**\n     * files X that should be reloaded\n     *\n     * - some plugin P -> file X -> some change C\n     * - file X -> none of plugin Q -> some change D\n     */\n    const accepted = new Set<string>()\n\n    /**\n     * files X that should not be reloaded\n     *\n     * - including all externals E\n     * - some change C -> file X\n     * - file X -> none of change D\n     */\n    const declined = new Set(externals)\n    const visited = new Set<string>()\n\n    function traverse(filename: string) {\n      if (declined.has(filename) || filename.includes('/node_modules/')) return\n      visited.add(filename)\n      const { children } = require.cache[filename]\n      let isActive = stashed.has(filename)\n      for (const module of children) {\n        if (visited.has(filename)) continue\n        if (traverse(module.filename)) {\n          stashed.add(filename)\n          isActive = true\n        }\n      }\n      if (isActive) return isActive\n      declined.add(filename)\n    }\n    Array.from(stashed).forEach(traverse)\n\n    for (const filename in require.cache) {\n      // we only detect reloads at plugin level\n      const module = require.cache[filename]\n      const state = app.registry.get(module.exports)\n      if (!state) continue\n\n      // check if it is a dependent of the changed file\n      const dependencies = [...loadDependencies(filename, declined)]\n      if (!dependencies.some(dep => stashed.has(dep))) continue\n\n      // accept dependencies to be reloaded\n      dependencies.forEach(dep => accepted.add(dep))\n      const plugin = require(filename)\n      if (state?.sideEffect) {\n        triggerFullReload()\n        continue\n      }\n\n      // dispose installed plugin\n      tasks.push(app.dispose(plugin).catch((err) => {\n        const displayName = plugin.name || relative(watchRoot, filename)\n        logger.warn('failed to dispose plugin %c\\n' + coerce(err), displayName)\n      }))\n\n      // prepare for reload\n      let ancestor = state, isMarked = false\n      while ((ancestor = ancestor.parent) && !(isMarked = reloads.has(ancestor)));\n      if (!isMarked) reloads.set(state, filename)\n    }\n\n    stashed = new Set()\n    currentUpdate = Promise.all(tasks).then(() => {\n      // delete module cache before re-require\n      accepted.forEach((path) => {\n        logger.debug('cache deleted:', path)\n        delete require.cache[path]\n      })\n\n      // reload all dependent plugins\n      for (const [state, filename] of reloads) {\n        try {\n          const plugin = require(filename)\n          state.context.plugin(plugin, state.config)\n          const displayName = plugin.name || relative(watchRoot, filename)\n          logger.info('reload plugin %c', displayName)\n        } catch (err) {\n          logger.warn('failed to reload plugin at %c\\n' + coerce(err), relative(watchRoot, filename))\n        }\n      }\n    })\n  }\n\n  watcher.on('change', (path) => {\n    if (!require.cache[path]) return\n    logger.debug('change detected:', path)\n\n    // files independent from any plugins will trigger a full reload\n    if (path === configFile || externals.has(path)) {\n      return triggerFullReload()\n    }\n\n    // do not trigger another reload during one reload\n    stashed.add(path)\n    Promise.resolve(currentUpdate).then(flushChanges)\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yBAA0D;AAC1D,kBAAoD;AACpD,0BAA0E;AAC1E,gBAA0C;AAC1C,wBAA4B;AAC5B,mBAAuB;AAGvB,IAAM,SAAS,IAAI,2BAAO;AAC1B,IAAI,YAAY,QAAQ;AAExB,yBAAyB,OAAY;AACnC,SAAO,MAAM;AACb,UAAQ,KAAK;AAAA;AAGf,QAAQ,GAAG,qBAAqB;AAEhC,IAAI;AAAJ,IAAwB;AACxB,IAAM,WAAW;AACjB,IAAI,QAAQ,IAAI,oBAAoB;AAClC,eAAa,yBAAQ,WAAW,QAAQ,IAAI;AAC5C,cAAY,yBAAQ;AACpB,cAAY,yBAAQ;AAAA,OACf;AACL,QAAM,QAAQ,2BAAY;AAC1B,cAAY,CAAC,OAAO,SAAS,OAAO,WAAW,SAAS,QAAQ,KAAK,SAAO,MAAM,SAAS,WAAW;AACtG,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,8BAA8B,yBAAO;AAAA;AAEvD,eAAa,YAAY,MAAM,WAAW;AAAA;AAG5C,sBAAsB;AACpB,MAAI,CAAC,SAAS,QAAQ,SAAS,YAAY;AACzC,UAAM,EAAE,SAAS,QAAQ;AACzB,WAAO,KAAK,4BAAa,YAAY;AAAA,SAChC;AACL,UAAM,WAAU,QAAQ;AACxB,WAAO,SAAQ,aAAa,SAAQ,UAAU;AAAA;AAAA;AAIlD,uBAAuB,OAAY;AACjC,SAAO,MAAM,SAAS,sBAAsB,MAAM,gBAAgB,MAAM,aAAa,OAAO;AAAA;AAG9F,IAAM,QAAuC;AAE7C,uBAAuB,MAAc,MAAc;AACjD,QAAM,MAAM,GAAG,QAAQ;AACvB,MAAI,OAAO;AAAO,WAAO,MAAM;AAE/B,QAAM,SAAS,UAAU;AACzB,QAAM,UAAoB;AAC1B,MAAI,KAAK,SAAS,KAAK,KAAK;AAE1B,YAAQ,KAAK,yBAAQ,WAAW;AAAA,aACvB,KAAK,SAAS,SAAS;AAEhC,YAAQ,KAAK;AAAA,aACJ,KAAK,OAAO,KAAK;AAE1B,UAAM,QAAQ,KAAK,YAAY;AAC/B,YAAQ,KAAK,KAAK,MAAM,GAAG,QAAQ,KAAK,SAAS,KAAK,MAAM,QAAQ,IAAI;AAAA,SACnE;AAEL,YAAQ,KAAK,SAAS,MAAM;AAAA;AAG9B,aAAW,QAAQ,SAAS;AAC1B,WAAO,MAAM,gBAAgB;AAC7B,QAAI;AACF,YAAM,SAAS,QAAQ;AACvB,aAAO,KAAK,eAAe,MAAM,OAAO,QAAQ;AAChD,aAAO,MAAM,OAAO,CAAC,MAAM;AAAA,aACpB,OAAP;AACA,UAAI,cAAc,QAAQ;AACxB,cAAM;AAAA;AAAA;AAAA;AAIZ,QAAM,IAAI,MAAM,kBAAkB,QAAQ;AAAA;AAG5C,yBAAyB,SAAwB,MAAc;AArF/D;AAsFE,gBAAO,SAAP,oBAAO,OAAS;AAChB,SAAO,OAAO,SAAQ,QAAQ,CAAC,UAAU;AACvC,QAAI,OAAO,UAAU;AAAU;AAC/B,oBAAgB,OAAO,QAAO;AAAA;AAAA;AAIlC,IAAM,SAAoB;AAG1B,IAAI,OAAO,OAAO,aAAa,UAAU;AACvC,6BAAO,SAAS,OAAO;AAAA,WACd,OAAO,OAAO,aAAa,UAAU;AAC9C,6BAAO,OAAO,OAAO,OAAO;AAAA;AAG9B,IAAI,OAAO,YAAY;AAAM,SAAO,UAAU;AAC9C,IAAI,OAAO;AAAS,6BAAO,WAAW,OAAO;AAG7C,IAAI,QAAQ,IAAI,kBAAkB;AAChC,6BAAO,OAAO,OAAO,CAAC,QAAQ,IAAI;AAAA;AAGpC,gBAAgB,2BAAO,QAAQ;AAE/B,IAAI,QAAQ,IAAI,cAAc;AAC5B,aAAW,QAAQ,QAAQ,IAAI,aAAa,MAAM,MAAM;AACtD,QAAI,2BAAO,MAAM,QAAQ,2BAAO;AAAA;AAAA;AASpC,QAAQ,GAAG,WAAW,CAAC,SAAkB;AACvC,MAAI,KAAK,SAAS,QAAQ;AACxB,UAAM,EAAE,WAAW,SAAS,KAAK,YAAY,KAAK;AAClD,UAAM,MAAM,IAAI,KAAK;AACrB,QAAI,YAAY,WAAW,SAAS;AAAA;AAAA;AAIxC,qBAAqB,KAAiB;AACpC,QAAM,CAAC,QAAQ,IAAI,KAAK,MAAM,KAAK;AACnC,gBAAc,WAAW;AAAA;AAI3B,IAAI,OAAO,MAAM;AACf,cAAY;AAAA,OACP;AACL,SAAO,KAAK,QAAQ;AAAA;AAGtB,IAAM,MAAM,IAAI,uBAAI;AAEpB,IAAM,EAAE,aAAa,cAAc,SAAS,OAAO,UAAU;AAE7D,IAAM,eAAe,CAAC,WAA2B;AAC/C,MAAI,2BAAO,OAAO,KAAK,iBAAiB;AACxC,MAAI,SAAS,QAAQ,QAAQ,QAAQ,MAAM,QAAQ;AAAA;AAGrD,6BAAS,IAAI,UAAU;AAAA,EACrB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA;AAGb,eAAe,IACZ,QAAQ,gBAAgB,OAAO,SAAS,aAAa,WAAW,EAAE,WAAW,KAC7E,OAAO,WAAW,YAClB,SAAS,MAAM,EAAE,QAAQ,QACzB,SAAS,MAAM,EAAE,QAAQ,MAAM,SAAS,EAAE,SAAS,UACnD,OAAO,OAAO,EAAE,SAAS,cAAc;AACtC,QAAM,EAAE,WAAW,SAAS,QAAQ;AACpC,MAAI,CAAC,QAAQ,SAAS;AACpB,UAAM,QAAQ,KAAK,kCAAS,mBAAmB,MAAM;AACrD,YAAQ;AAAA;AAEV,UAAQ,KAAK,EAAE,MAAM,SAAS,MAAM,EAAE,WAAW,SAAS,KAAK,SAAS,kCAAS;AACjF,QAAM,QAAQ,KAAK,kCAAS,sBAAsB,MAAM;AACxD,UAAQ,KAAK;AAAA;AAGjB,IAAM,YAAY,CAAC,QAAQ,SAAS,WAAW,QAAQ,WAAW;AAWlE,uBAAuB,SAAoB;AACzC,MAAI,MAAe;AAGnB,aAAW,QAAQ,WAAW;AAC5B,UAAM,QAAQ,QAAQ,IAAI;AAC1B,QAAI,UAAU,MAAM;AAClB,YAAM,IAAI;AAAA,eACD,UAAU,OAAO;AAC1B,YAAM,IAAI,MAAM;AAAA,eACP,UAAU,QAAW;AAE9B,YAAM,IAAI,MAAM,GAAG,mCAAU,OAAO,IAAI,UAAQ,KAAK;AAAA;AAAA;AAKzD,MAAI,QAAQ,QAAQ;AAClB,QAAI,OAAgB;AACpB,eAAW,aAAa,QAAQ,QAAQ;AACtC,aAAO,KAAK,MAAM,cAAc;AAAA;AAElC,UAAM,IAAI,UAAU;AAAA;AAItB,MAAI,QAAQ,SAAS;AACnB,UAAM,IAAI,OAAO,cAAc,QAAQ;AAAA;AAGzC,SAAO;AAAA;AAIT,IAAM,UAAU,IAAI;AACpB,IAAM,gBAAkC,MAAM,QAAQ,OAAO,WACzD,OAAO,QAAQ,IAAI,UAAQ,MAAM,QAAQ,QAAQ,OAAO,CAAC,SACzD,OAAO,QAAQ,OAAO,WAAW;AACrC,WAAW,CAAC,MAAM,YAAY,eAAe;AAC3C,QAAM,CAAC,MAAM,UAAU,cAAc,UAAU;AAC/C,UAAQ,IAAoB,AAAhB,QAAQ,QAAQ;AAC5B,gBAAc,SAAS,OAAO,QAAQ;AAAA;AAGxC,QAAQ,GAAG,sBAAsB,CAAC,UAAU;AAC1C,SAAO,KAAK;AAAA;AAGd,IAAI,QAAQ,KAAK,MAAM;AAzOvB;AA0OE,SAAO,KAAK,MAAM,UAAU;AAE5B,MAAI,KAAK,QAAQ,SAAO;AACtB,WAAO,KAAK,8BAA8B,IAAI,UAAU,IAAI,UAAU,IAAI;AAAA;AAG5E,QAAM,OAAO,KAAK,IAAI,GAAG,8BAAY,QAAQ,CAAC,QAAQ,IAAI,mBAAmB;AAC7E,SAAO,QAAQ,+BAA+B;AAC9C,6BAAO,YAAY,KAAK;AACxB,6BAAO,WAAW,aAAO,YAAP,YAAkB,CAAC,2BAAO;AAE5C,UAAQ,KAAK,EAAE,MAAM,SAAS,MAAM,EAAE;AACtC;AAEA,UAAQ,GAAG,UAAU;AACrB,UAAQ,GAAG,WAAW;AAAA,GACrB;AAEH,0BAA0B,UAAkB,SAAsB;AAChE,QAAM,eAAe,IAAI;AACzB,oBAAkB,EAAE,qBAAU,YAAwB;AACpD,QAAI,QAAQ,IAAI,cAAa,aAAa,IAAI,cAAa,UAAS,SAAS;AAAmB;AAChG,iBAAa,IAAI;AACjB,aAAS,QAAQ;AAAA;AAEnB,WAAS,QAAQ,MAAM;AACvB,SAAO;AAAA;AAGT,yBAAyB;AAvQzB;AAwQE,MAAI,QAAQ,IAAI,sBAAsB,UAAa,CAAC,OAAO;AAAO;AAElE,QAAM,EAAE,UAAU,QAAQ;AAC1B,QAAM,EAAE,OAAO,IAAI,UAAU,IAAI,eAAe,OAAO,SAAS;AAChE,QAAM,YAAY,yBAAQ,WAAW,cAAQ,IAAI,sBAAZ,YAAiC;AACtE,QAAM,UAAU,MAAM,WAAW,iCAC5B,OAAO,QADqB;AAAA,IAE/B,SAAS,CAAC,sBAAsB,cAAc,GAAG;AAAA;AAQnD,QAAM,YAAY,iBAAiB,YAAY;AAE/C,QAAM,UAAS,IAAI,2BAAO;AAC1B,+BAA6B;AAC3B,QAAI,eAAe;AAAO;AAC1B,YAAO,KAAK;AACZ,YAAQ,KAAK;AAAA;AASf,MAAI,UAAU,IAAI;AAClB,MAAI;AAEJ,0BAAwB;AACtB,UAAM,QAAyB;AAC/B,UAAM,UAAU,IAAI;AAQpB,UAAM,WAAW,IAAI;AASrB,UAAM,WAAW,IAAI,IAAI;AACzB,UAAM,UAAU,IAAI;AAEpB,sBAAkB,UAAkB;AAClC,UAAI,SAAS,IAAI,aAAa,SAAS,SAAS;AAAmB;AACnE,cAAQ,IAAI;AACZ,YAAM,EAAE,aAAa,QAAQ,MAAM;AACnC,UAAI,WAAW,QAAQ,IAAI;AAC3B,iBAAW,WAAU,UAAU;AAC7B,YAAI,QAAQ,IAAI;AAAW;AAC3B,YAAI,SAAS,QAAO,WAAW;AAC7B,kBAAQ,IAAI;AACZ,qBAAW;AAAA;AAAA;AAGf,UAAI;AAAU,eAAO;AACrB,eAAS,IAAI;AAAA;AAEf,UAAM,KAAK,SAAS,QAAQ;AAE5B,eAAW,YAAY,QAAQ,OAAO;AAEpC,YAAM,UAAS,QAAQ,MAAM;AAC7B,YAAM,QAAQ,IAAI,SAAS,IAAI,QAAO;AACtC,UAAI,CAAC;AAAO;AAGZ,YAAM,eAAe,CAAC,GAAG,iBAAiB,UAAU;AACpD,UAAI,CAAC,aAAa,KAAK,SAAO,QAAQ,IAAI;AAAO;AAGjD,mBAAa,QAAQ,SAAO,SAAS,IAAI;AACzC,YAAM,SAAS,QAAQ;AACvB,UAAI,+BAAO,YAAY;AACrB;AACA;AAAA;AAIF,YAAM,KAAK,IAAI,QAAQ,QAAQ,MAAM,CAAC,QAAQ;AAC5C,cAAM,cAAc,OAAO,QAAQ,0BAAS,WAAW;AACvD,gBAAO,KAAK,kCAAkC,gCAAO,MAAM;AAAA;AAI7D,UAAI,WAAW,OAAO,WAAW;AACjC,aAAQ,YAAW,SAAS,WAAW,CAAE,YAAW,QAAQ,IAAI;AAAW;AAC3E,UAAI,CAAC;AAAU,gBAAQ,IAAI,OAAO;AAAA;AAGpC,cAAU,IAAI;AACd,oBAAgB,QAAQ,IAAI,OAAO,KAAK,MAAM;AAE5C,eAAS,QAAQ,CAAC,SAAS;AACzB,gBAAO,MAAM,kBAAkB;AAC/B,eAAO,QAAQ,MAAM;AAAA;AAIvB,iBAAW,CAAC,OAAO,aAAa,SAAS;AACvC,YAAI;AACF,gBAAM,SAAS,QAAQ;AACvB,gBAAM,QAAQ,OAAO,QAAQ,MAAM;AACnC,gBAAM,cAAc,OAAO,QAAQ,0BAAS,WAAW;AACvD,kBAAO,KAAK,oBAAoB;AAAA,iBACzB,KAAP;AACA,kBAAO,KAAK,oCAAoC,gCAAO,MAAM,0BAAS,WAAW;AAAA;AAAA;AAAA;AAAA;AAMzF,UAAQ,GAAG,UAAU,CAAC,SAAS;AAC7B,QAAI,CAAC,QAAQ,MAAM;AAAO;AAC1B,YAAO,MAAM,oBAAoB;AAGjC,QAAI,SAAS,cAAc,UAAU,IAAI,OAAO;AAC9C,aAAO;AAAA;AAIT,YAAQ,IAAI;AACZ,YAAQ,QAAQ,eAAe,KAAK;AAAA;AAAA;",
  "names": []
}

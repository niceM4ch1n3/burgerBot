{
  "version": 3,
  "sources": ["../src/init.ts", "../src/start.ts", "../src/index.ts"],
  "sourcesContent": ["/* eslint-disable quote-props */\n\nimport { promises as fs, existsSync } from 'fs'\nimport { yellow, red, green, magenta } from 'kleur'\nimport { resolve, extname, dirname } from 'path'\nimport { spawn, StdioOptions } from 'child_process'\nimport { AppConfig, BotOptions } from '..'\nimport { CAC } from 'cac'\nimport prompts, { Choice, PromptObject } from 'prompts'\n\nconst serverQuestions: PromptObject[] = [{\n  name: 'type',\n  type: 'select',\n  message: 'Adapter Type',\n  choices: [\n    { title: 'OneBot - HTTP', value: 'onebot:http' },\n    { title: 'OneBot - WebSocket', value: 'onebot:ws' },\n    { title: 'OneBot - WebSocket Reverse', value: 'onebot:ws-reverse' },\n    { title: 'Discord - WebSocket', value: 'discord' },\n    { title: 'Telegram - HTTP', value: 'telegram' },\n    { title: 'Kaiheila - HTTP', value: 'kaiheila:http' },\n    { title: 'Kaiheila - WebSocket', value: 'kaiheila:ws' },\n    // { title: 'Tomon', value: 'tomon' },\n  ],\n}, {\n  name: 'port',\n  type: () => !bots.length ? 'number' : null,\n  message: 'Koishi Port',\n  initial: 8080,\n}]\n\ntype PromptDict = Record<string, PromptObject[]>\n\nconst botMap: PromptDict = {\n  'onebot': [{\n    name: 'server',\n    type: () => config.type === 'onebot:http' ? 'text' : null,\n    message: 'HTTP Server',\n    initial: 'http://localhost:5700',\n  }, {\n    name: 'server',\n    type: () => config.type === 'onebot:ws' ? 'text' : null,\n    message: 'WebSocket Server',\n    initial: 'ws://localhost:6700',\n  }, {\n    name: 'selfId',\n    type: 'number',\n    message: 'Your Bot\\'s QQ Number',\n  }, {\n    name: 'token',\n    type: 'text',\n    message: 'Token for CQHTTP Server',\n  }],\n  'discord': [{\n    name: 'token',\n    type: 'text',\n    message: 'Token for Discord',\n  }],\n  'telegram': [{\n    name: 'token',\n    type: 'text',\n    message: 'Token for Telegram',\n  }],\n  'kaiheila': [{\n    name: 'token',\n    type: () => config.type === 'kaiheila:ws' ? 'text' : null,\n    message: 'Token for Kaiheila',\n  }, {\n    name: 'verifyToken',\n    type: () => config.type === 'kaiheila:http' ? 'text' : null,\n    message: 'Verify Token for Kaiheila',\n  }],\n  'tomon': [{\n    name: 'token',\n    type: 'text',\n    message: 'Token for Tomon',\n  }],\n}\n\nconst adapterMap: PromptDict = {\n  'onebot': [{\n    name: 'path',\n    type: () => !config['onebot'] && config.type !== 'onebot:ws' ? 'text' : null,\n    message: 'Server Path',\n  }, {\n    name: 'secret',\n    type: () => !config['onebot'] ? 'text' : null,\n    message: 'Secret for Koishi Server',\n  }],\n  'telegram': [{\n    name: 'selfUrl',\n    type: 'text',\n    message: 'Your Public URL',\n  }, {\n    name: 'path',\n    type: () => !config['telegram'] ? 'text' : null,\n    message: 'Telegram Path',\n  }],\n  'kaiheila': [{\n    name: 'path',\n    type: () => !config['kaiheila'] && config.type !== 'kaiheila:ws' ? 'text' : null,\n    message: 'Kaiheila Path',\n  }],\n}\n\nconst databaseQuestions: PromptObject<'database'>[] = [{\n  name: 'database',\n  type: 'select',\n  message: 'Database Type',\n  choices: [\n    { title: 'None', value: null },\n    { title: 'MySQL', value: 'mysql' },\n    { title: 'MongoDB', value: 'mongo' },\n  ],\n}]\n\nconst databaseMap: PromptDict = {\n  mysql: [{\n    name: 'host',\n    type: 'text',\n    message: 'MySQL / Host',\n    initial: '127.0.0.1',\n  }, {\n    name: 'port',\n    type: 'number',\n    message: 'MySQL / Port',\n    initial: '3306',\n  }, {\n    name: 'user',\n    type: 'text',\n    message: 'MySQL / Username',\n    initial: 'root',\n  }, {\n    name: 'password',\n    type: 'text',\n    message: 'MySQL / Password',\n  }, {\n    name: 'database',\n    type: 'text',\n    message: 'MySQL / Database',\n    initial: 'koishi',\n  }],\n  mongo: [{\n    name: 'host',\n    type: 'text',\n    message: 'MongoDB / Host',\n    initial: '127.0.0.1',\n  }, {\n    name: 'port',\n    type: 'number',\n    message: 'MongoDB / Port',\n    initial: '27017',\n  }, {\n    name: 'username',\n    type: 'text',\n    message: 'MongoDB / Username',\n    initial: 'root',\n  }, {\n    name: 'password',\n    type: 'text',\n    message: 'MongoDB / Password',\n  }, {\n    name: 'name',\n    type: 'text',\n    message: 'MongoDB / Database',\n    initial: 'koishi',\n  }],\n}\n\nasync function question<T extends string>(questions: PromptObject<T>[]) {\n  let succeed = true\n  const data = await prompts(questions, {\n    onCancel: () => succeed = false,\n  })\n  if (!succeed) throw new Error('interrupted')\n  return data\n}\n\nasync function confirm(message: string, initial: boolean) {\n  const { confirmed } = await question([{\n    name: 'confirmed',\n    type: 'confirm',\n    initial,\n    message,\n  }])\n  return confirmed as boolean\n}\n\ntype DependencyType = 'dependencies' | 'devDependencies' | 'peerDependencies' | 'optionalDependencies'\n\ninterface Package extends Partial<Record<DependencyType, Record<string, string>>> {\n  version: string\n  description?: string\n}\n\nconst cwd = process.cwd()\nconst metaPath = resolve(cwd, 'package.json')\nconst ecosystem: Record<string, Package> = require('../ecosystem')\nconst builtinPlugins = ['common', 'webui']\nconst dbRelatedPlugins = ['schedule', 'teach']\nconst config: AppConfig = {}\nconst bots: BotOptions[] = []\n\nasync function createConfig() {\n  let bot: BotOptions\n  do {\n    Object.assign(config, await question(serverQuestions))\n    const [platform] = config.type.split(':', 1)\n    bots.push(bot = { type: config.type })\n    Object.assign(bot, await question(botMap[platform]))\n    if (adapterMap[platform]) {\n      config[platform] = await question(adapterMap[platform])\n    }\n  } while (await confirm('configurate another bot?', false))\n  delete config.type\n\n  // database\n  config.bots = bots\n  config.plugins = {}\n  const { database } = await question(databaseQuestions)\n  if (database) {\n    config.plugins[database] = await question(databaseMap[database])\n  }\n\n  // official plugins\n  const choices: Choice[] = Object.entries(ecosystem).map(([title, meta]) => {\n    if (!title.startsWith('koishi-plugin-')) return\n    const value = title.slice(14)\n    if (value in databaseMap) return\n    if (!database && dbRelatedPlugins.includes(value)) return\n    const { description } = meta\n    const selected = builtinPlugins.includes(value)\n    return { title, value, description, selected }\n  }).filter(Boolean)\n\n  const { plugins } = await prompts({\n    type: 'multiselect',\n    name: 'plugins',\n    message: 'Choose Official Plugins',\n    choices,\n  })\n\n  for (const name of plugins) {\n    config.plugins[name] = {}\n  }\n}\n\nconst sourceTypes = ['js', 'ts', 'json', 'yaml', 'yml'] as const\ntype SourceType = typeof sourceTypes[number]\n\nconst error = red('error')\nconst success = green('success')\nconst info = magenta('info')\n\ntype SerializableObject = { [key: string]: Serializable }\ntype Serializable = string | number | Serializable[] | SerializableObject\n\nfunction joinLines(lines: string[], type: SourceType, indent: string) {\n  if (!lines.length) return ''\n  // 如果是根节点就多个换行，看着舒服\n  let separator = '\\n  ' + indent\n  if (type !== 'yaml') separator = ',' + separator\n  return `\\n  ${indent}${lines.join(separator)}${type === 'json' || type === 'yaml' ? '' : ','}\\n${indent}`\n}\n\nfunction comment(data: SerializableObject, prop: string) {\n  if (prop === 'port') return 'Koishi 服务器监听的端口'\n  if (prop === 'server' && data.type === 'onebot:http') {\n    return '对应 cqhttp 配置项 http_config.port'\n  }\n  if (prop === 'server' && data.type === 'onebot:ws') {\n    return '对应 cqhttp 配置项 ws_config.port'\n  }\n  if (prop === 'path' && data === config['onebot']) {\n    return '对应 cqhttp 配置项 http_config.post_urls, ws_reverse_servers.reverse_url'\n  }\n}\n\nfunction codegen(data: Serializable, type: SourceType, indent = ''): string {\n  if (data === null) return 'null'\n\n  switch (typeof data) {\n    case 'number': case 'boolean': return '' + data\n    case 'string': return type === 'yaml' ? data\n      : type === 'json' || data.includes(\"'\") && !data.includes('\"')\n        ? `\"${data.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`\n        : `'${data.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\")}'`\n    case 'undefined': return undefined\n  }\n\n  if (Array.isArray(data)) {\n    return type === 'yaml'\n      ? joinLines(data.map(value => '- ' + codegen(value, type, '  ' + indent).trimStart()), type, indent)\n      : `[${data.map(value => codegen(value, type, indent)).join(', ')}]`\n  }\n\n  // object\n  const prefix = type === 'yaml' ? '# ' : '// '\n  const shouldQuote = type === 'json' ? true\n    : type === 'yaml' ? Object.keys(data).some(name => name.startsWith('@'))\n      : !Object.keys(data).every(name => name.match(/^[\\w$]+$/))\n  const output = joinLines(Object.entries(data).filter(([, value]) => value !== undefined).map(([key, value]) => {\n    let output = type !== 'json' && comment(data, key) || ''\n    if (output) output = output.split('\\n').map(line => prefix + line + '\\n  ' + indent).join('')\n    output += type === 'json' ? `\"${key}\"` : shouldQuote ? `'${key}'` : key\n    output += ': ' + codegen(value, type, '  ' + indent)\n    return output\n  }), type, indent)\n  return type === 'yaml' ? output : `{${output}}`\n}\n\nconst rootComment = '配置项文档：https://koishi.js.org/api/app.html'\n\nasync function writeConfig(config: any, path: string, type: SourceType) {\n  if (type === 'yml') type = 'yaml'\n\n  // generate output\n  let output = codegen(config, type) + '\\n'\n  if (type === 'js') {\n    output = '// ' + rootComment + '\\nmodule.exports = ' + output\n  } else if (type === 'ts') {\n    output = \"import { AppConfig } from 'koishi'\\n\\n// \"\n      + rootComment\n      + '\\nexport default '\n      + output.replace(/\\n$/, ' as AppConfig\\n')\n  } else if (type === 'yaml') {\n    output = '# ' + rootComment + '\\n' + output.replace(/^ {2}/mg, '')\n  }\n\n  // write to file\n  const folder = dirname(path)\n  await fs.mkdir(folder, { recursive: true })\n  await fs.writeFile(path, output.replace(/^ +$/mg, ''))\n  console.log(`${success} created config file: ${path}`)\n}\n\nasync function loadMeta() {\n  return JSON.parse(await fs.readFile(metaPath, 'utf8')) as Package\n}\n\nfunction execute(bin: string, args: string[] = [], stdio: StdioOptions = 'inherit') {\n  // fix for #205\n  // https://stackoverflow.com/questions/43230346/error-spawn-npm-enoent\n  const child = spawn(bin + (process.platform === 'win32' ? '.cmd' : ''), args, { stdio })\n  return new Promise<number>((resolve) => {\n    child.on('close', resolve)\n  })\n}\n\ntype Manager = 'yarn' | 'npm'\n\nasync function getManager(): Promise<Manager> {\n  if (existsSync(resolve(cwd, 'yarn.lock'))) return 'yarn'\n  if (existsSync(resolve(cwd, 'package-lock.json'))) return 'npm'\n  if (!await execute('yarn', ['--version'], 'ignore')) return 'yarn'\n  return 'npm'\n}\n\n// async jobs ahead of time\nconst _meta = loadMeta()\nconst _kind = getManager()\n\nconst installArgs: Record<Manager, string[]> = {\n  yarn: [],\n  npm: ['install', '--loglevel', 'error'],\n}\n\nasync function updateMeta() {\n  const meta = await _meta\n  const kind = await _kind\n\n  let modified = false\n  if (!meta.dependencies) meta.dependencies = {}\n\n  function ensureDependency(name: string) {\n    if (meta.dependencies[name]) return\n    modified = true\n    meta.dependencies[name] = '^' + ecosystem[name].version\n  }\n\n  for (const bot of config.bots) {\n    const [name] = bot.type.split(':', 1)\n    ensureDependency('koishi-adapter-' + name)\n  }\n\n  for (const name of Object.keys(config.plugins)) {\n    ensureDependency('koishi-plugin-' + name)\n  }\n\n  if (!modified) return\n  await fs.writeFile(metaPath, JSON.stringify(meta, null, 2))\n  console.log(`${success} package.json was updated`)\n\n  const args = installArgs[kind]\n  if (!await confirm('package.json was updated. install new dependencies now?', true).catch(() => false)) {\n    console.log(`${info} type \"${[kind, ...args].join(' ')}\" to install new dependencies before using koishi`)\n    return\n  }\n\n  process.exit(await execute(kind, args))\n}\n\nexport default function (cli: CAC) {\n  cli.command('init [file]', 'initialize a koishi configuration file')\n    .option('-f, --forced', 'overwrite config file if it exists')\n    .action(async (file = 'koishi.config.js', options?) => {\n      // resolve file path\n      const path = resolve(cwd, file)\n      if (!options.forced && existsSync(path)) {\n        console.warn(`${error} configuration file already exists. If you want to overwrite the current file, use ${yellow('koishi init -f')}`)\n        process.exit(1)\n      }\n\n      // parse extension\n      const extension = extname(path).slice(1) as SourceType\n      if (!extension) {\n        console.warn(`${error} configuration file should have an extension, received \"${file}\"`)\n        process.exit(1)\n      } else if (!sourceTypes.includes(extension)) {\n        console.warn(`${error} configuration file type \"${extension}\" is currently not supported`)\n        process.exit(1)\n      }\n\n      // create configurations\n      await createConfig().catch(() => {\n        console.warn(`${error} initialization was canceled`)\n        process.exit(0)\n      })\n\n      await writeConfig(config, path, extension)\n      await updateMeta()\n    })\n}\n", "import { performance } from 'perf_hooks'\nimport { isInteger } from 'koishi-utils'\nimport { fork, ChildProcess } from 'child_process'\nimport { resolve } from 'path'\nimport { CAC } from 'cac'\nimport kleur from 'kleur'\n\nprocess.env.KOISHI_START_TIME = '' + performance.now()\n\ninterface WorkerOptions {\n  '--'?: string[]\n}\n\nlet child: ChildProcess\n\nprocess.on('SIGINT', () => {\n  if (child) {\n    child.emit('SIGINT')\n  } else {\n    process.exit()\n  }\n})\n\ninterface Message {\n  type: 'start' | 'queue'\n  body: any\n}\n\nlet buffer = null\n\nfunction createWorker(options: WorkerOptions) {\n  child = fork(resolve(__dirname, 'worker'), [], {\n    execArgv: options['--'],\n  })\n\n  let config: { autoRestart: boolean }\n\n  child.on('message', (message: Message) => {\n    if (message.type === 'start') {\n      config = message.body\n      if (buffer) {\n        child.send({ type: 'send', body: buffer })\n        buffer = null\n      }\n    } else if (message.type === 'queue') {\n      buffer = message.body\n    }\n  })\n\n  /**\n   * https://tldp.org/LDP/abs/html/exitcodes.html\n   * - 0: exit manually\n   * - 130: SIGINT\n   * - 137: SIGKILL\n   * - **114: exit and restart (Koishi)**\n   */\n  const closingCode = [0, 130, 137]\n\n  child.on('exit', (code) => {\n    if (!config || closingCode.includes(code) || code !== 114 && !config.autoRestart) {\n      process.exit(code)\n    }\n    createWorker(options)\n  })\n}\n\nfunction setEnvArg(name: string, value: string | boolean) {\n  if (value === true) {\n    process.env[name] = ''\n  } else if (value) {\n    process.env[name] = value\n  }\n}\n\nexport default function (cli: CAC) {\n  cli.command('start [file]', 'start a koishi bot')\n    .alias('run')\n    .option('--debug [namespace]', 'specify debug namespace')\n    .option('--log-level [level]', 'specify log level (default: 2)')\n    .option('--log-time [format]', 'show timestamp in logs')\n    .option('--watch [path]', 'watch and reload at change')\n    .action((file, options) => {\n      const { logLevel } = options\n      if (logLevel !== undefined && (!isInteger(logLevel) || logLevel < 0)) {\n        console.warn(`${kleur.red('error')} log level should be a positive integer.`)\n        process.exit(1)\n      }\n      setEnvArg('KOISHI_WATCH_ROOT', options.watch)\n      setEnvArg('KOISHI_LOG_TIME', options.logTime)\n      process.env.KOISHI_LOG_LEVEL = logLevel || ''\n      process.env.KOISHI_DEBUG = options.debug || ''\n      process.env.KOISHI_CONFIG_FILE = file || ''\n      createWorker(options)\n    })\n}\n", "#!/usr/bin/env node\n\nimport registerInitCommand from './init'\nimport registerStartCommand from './start'\nimport CAC from 'cac'\n\ndeclare const KOISHI_VERSION: string\n\nconst cli = CAC('koishi').help().version(KOISHI_VERSION)\n\nregisterInitCommand(cli)\nregisterStartCommand(cli)\n\ncli.parse()\n\nif (!cli.matchedCommand) {\n  cli.outputHelp()\n}\n"],
  "mappings": "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",
  "names": []
}

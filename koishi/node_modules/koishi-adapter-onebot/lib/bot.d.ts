import { Bot, Session, BotOptions, Adapter } from 'koishi-core';
import * as OneBot from './utils';
export declare class SenderError extends Error {
    constructor(args: Record<string, any>, url: string, retcode: number, selfId: string);
}
export interface CQBot extends OneBot.API {
}
export declare class CQBot extends Bot {
    version: string;
    _request?(action: string, params: Record<string, any>): Promise<OneBot.Response>;
    constructor(adapter: Adapter<'onebot'>, options: BotOptions);
    [Session.send](message: Session, content: string): Promise<void>;
    get<T = any>(action: string, params?: {}, silent?: boolean): Promise<T>;
    getAsync(action: string, params?: {}): Promise<void>;
    sendMessage(channelId: string, content: string): Promise<string>;
    getMessage(channelId: string, messageId: string): Promise<import("koishi-core").MessageInfo>;
    deleteMessage(channelId: string, messageId: string): Promise<void>;
    getSelf(): Promise<import("koishi-core").UserInfo>;
    getUser(userId: string): Promise<import("koishi-core").UserInfo>;
    getFriendList(): Promise<import("koishi-core").UserInfo[]>;
    getChannel(channelId: string): Promise<import("koishi-core").ChannelInfo>;
    getGroup(groupId: string): Promise<import("koishi-core").GroupInfo>;
    getGroupList(): Promise<import("koishi-core").GroupInfo[]>;
    getGroupMember(groupId: string, userId: string): Promise<import("koishi-core").GroupMemberInfo>;
    getGroupMemberList(groupId: string): Promise<import("koishi-core").GroupMemberInfo[]>;
    sendGroupMessage(groupId: string, content: string): Promise<string>;
    sendPrivateMessage(userId: string, content: string): Promise<string>;
    $setGroupAnonymousBan(groupId: string, meta: string | object, duration?: number): Promise<void>;
    $setGroupAnonymousBanAsync(groupId: string, meta: string | object, duration?: number): Promise<void>;
    handleFriendRequest(messageId: string, approve: boolean, comment?: string): Promise<void>;
    handleGroupRequest(messageId: string, approve: boolean, comment?: string): Promise<void>;
    handleGroupMemberRequest(messageId: string, approve: boolean, comment?: string): Promise<void>;
    deleteFriend(userId: string): Promise<void>;
    getStatus(): Promise<Bot.Status>;
}

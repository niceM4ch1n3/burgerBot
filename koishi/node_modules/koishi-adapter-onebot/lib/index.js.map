{
  "version": 3,
  "sources": ["../src/index.ts", "../src/ws.ts", "../src/utils.ts", "../src/types.ts", "../src/bot.ts", "../src/http.ts"],
  "sourcesContent": ["import { Adapter, App, Context, Time } from 'koishi-core'\nimport { WsClient, WsServer } from './ws'\nimport { CQBot } from './bot'\nimport HttpServer, { ResponsePayload } from './http'\nimport axios from 'axios'\n\ninterface OneBotOptions extends Adapter.WsClientOptions {\n  path?: string\n  secret?: string\n  quickOperation?: number\n  responseTimeout?: number\n}\n\ndeclare module 'koishi-core' {\n  interface AppOptions {\n    onebot?: OneBotOptions\n  }\n\n  interface BotOptions {\n    server?: string\n  }\n\n  interface Session {\n    _response?: (payload: ResponsePayload) => void\n  }\n\n  namespace Bot {\n    interface Platforms {\n      onebot: CQBot\n    }\n  }\n}\n\nexport * from './bot'\nexport * from './utils'\nexport * from './http'\nexport * from './ws'\n\nApp.defaultConfig.onebot = {\n  responseTimeout: Time.minute,\n}\n\nAdapter.types['onebot:http'] = HttpServer\nAdapter.types['onebot:ws'] = WsClient\nAdapter.types['onebot:ws-reverse'] = WsServer\nAdapter.types['onebot'] = Adapter.redirect((bot) => {\n  return !bot.server ? 'onebot:ws-reverse'\n    : bot.server.startsWith('ws') ? 'onebot:ws'\n      : 'onebot:http'\n})\n\nconst { broadcast } = Context.prototype\nconst imageRE = /\\[CQ:image,file=([^,]+),url=([^\\]]+)\\]/\n\nContext.prototype.broadcast = async function (this: Context, ...args: any[]) {\n  const index = Array.isArray(args[0]) ? 1 : 0\n  let message = args[index] as string\n  let output = ''\n  let capture: RegExpExecArray\n  // eslint-disable-next-line no-cond-assign\n  while (capture = imageRE.exec(message)) {\n    const [text, , url] = capture\n    output += message.slice(0, capture.index)\n    message = message.slice(capture.index + text.length)\n    const { data } = await axios.get<ArrayBuffer>(url, { responseType: 'arraybuffer' })\n    output += `[CQ:image,file=base64://${Buffer.from(data).toString('base64')}]`\n  }\n  args[index] = output + message\n  return broadcast.apply(this, args)\n}\n", "import { App, Adapter } from 'koishi-core'\nimport { Logger, assertProperty } from 'koishi-utils'\nimport { connect } from './utils'\nimport { CQBot } from './bot'\nimport WebSocket from 'ws'\n\nconst logger = new Logger('onebot')\n\nexport class WsClient extends Adapter.WsClient<'onebot'> {\n  connect = connect\n\n  constructor(app: App) {\n    super(app, CQBot, app.options.onebot)\n  }\n\n  prepare(bot: CQBot) {\n    const headers: Record<string, string> = {}\n    if (bot.token) headers.Authorization = `Bearer ${bot.token}`\n    return new WebSocket(bot.server, { headers })\n  }\n}\n\nexport class WsServer extends Adapter<'onebot'> {\n  public wsServer?: WebSocket.Server\n\n  constructor(app: App) {\n    assertProperty(app.options, 'port')\n    super(app, CQBot)\n    const { onebot = {} } = this.app.options\n    const { path = '/onebot' } = onebot\n    this.wsServer = new WebSocket.Server({\n      path,\n      server: this.app._httpServer,\n    })\n  }\n\n  start() {\n    return new Promise<void>((resolve, reject) => {\n      this.wsServer.on('error', reject)\n      this.wsServer.on('connection', (socket, { headers }) => {\n        logger.debug('connected with', headers)\n        if (headers['x-client-role'] !== 'Universal') {\n          return socket.close(1008, 'invalid x-client-role')\n        }\n        const selfId = headers['x-self-id'].toString()\n        const bot = this.bots[selfId]\n        if (!bot) return socket.close(1008, 'invalid x-self-id')\n\n        bot.socket = socket\n        connect(bot).then(() => {\n          if (this.bots.every(({ version, server }) => version || server === null)) resolve()\n        }, reject)\n      })\n    })\n  }\n\n  stop() {\n    logger.debug('ws server closing')\n    this.wsServer.close()\n    for (const bot of this.bots) {\n      bot.socket = null\n    }\n  }\n}\n", "import { CQBot } from './bot'\nimport { Adapter, Session } from 'koishi-core'\nimport { Logger, camelCase, renameProperty, paramCase, segment } from 'koishi-utils'\nimport * as qface from 'qface'\nimport * as Koishi from 'koishi-core'\nimport * as OneBot from './types'\n\nexport * from './types'\n\nexport const adaptUser = (user: OneBot.AccountInfo): Koishi.UserInfo => ({\n  userId: user.userId.toString(),\n  avatar: `http://q.qlogo.cn/headimg_dl?dst_uin=${user.userId}&spec=640`,\n  username: user.nickname,\n})\n\nexport const adaptGroupMember = (user: OneBot.SenderInfo): Koishi.GroupMemberInfo => ({\n  ...adaptUser(user),\n  nickname: user.card,\n  roles: [user.role],\n})\n\nexport const adaptAuthor = (user: OneBot.SenderInfo, anonymous?: OneBot.AnonymousInfo): Koishi.AuthorInfo => ({\n  ...adaptUser(user),\n  nickname: anonymous?.name || user.card,\n  anonymous: anonymous?.flag,\n  roles: [user.role],\n})\n\nexport function adaptMessage(message: OneBot.Message): Koishi.MessageInfo {\n  return {\n    messageId: message.messageId.toString(),\n    timestamp: message.time * 1000,\n    author: adaptAuthor(message.sender, message.anonymous),\n    content: segment.transform(message.message, {\n      at({ qq }) {\n        if (qq !== 'all') return segment.at(qq)\n        return segment('at', { type: 'all' })\n      },\n      face: ({ id }) => segment('face', { id, url: qface.getUrl(id) }),\n      reply: (data) => segment('quote', data),\n    }),\n  }\n}\n\nexport const adaptGroup = (group: OneBot.GroupInfo): Koishi.GroupInfo => ({\n  groupId: group.groupId.toString(),\n  groupName: group.groupName,\n})\n\nexport const adaptChannel = (group: OneBot.GroupInfo): Koishi.ChannelInfo => ({\n  channelId: group.groupId.toString(),\n  channelName: group.groupName,\n})\n\nexport function toVersion(data: OneBot.VersionInfo) {\n  const { coolqEdition, pluginVersion, goCqhttp, version } = data\n  if (goCqhttp) {\n    return `go-cqhttp/${version.slice(1)}`\n  } else {\n    return `coolq/${coolqEdition} cqhttp/${pluginVersion}`\n  }\n}\n\nconst logger = new Logger('onebot')\n\nexport function createSession(adapter: Adapter, data: any) {\n  const session = camelCase<Session>(data)\n  renameProperty(session, 'type', 'postType')\n  renameProperty(session, 'subtype', 'subType')\n  session.platform = 'onebot'\n  session.selfId = '' + session.selfId\n  if (session.userId) session.userId = '' + session.userId\n  if (session.groupId) session.groupId = session.channelId = '' + session.groupId\n  if (session.targetId) session.targetId = '' + session.targetId\n  if (session.operatorId) session.operatorId = '' + session.operatorId\n\n  if (session.type === 'message') {\n    Object.assign(session, adaptMessage(session as any))\n    renameProperty(session, 'subtype', 'messageType')\n    session.channelId ||= `private:${session.userId}`\n  } else if (data.post_type === 'request') {\n    delete session['requestType']\n    renameProperty(session, 'content', 'comment')\n    renameProperty(session, 'messageId', 'flag')\n    if (data.request_type === 'friend') {\n      session.type = 'friend-request'\n      session.channelId = `private:${session.userId}`\n    } else if (data.sub_type === 'add') {\n      session.type = 'group-member-request'\n    } else {\n      session.type = 'group-request'\n    }\n  } else if (data.post_type === 'notice') {\n    delete session['noticeType']\n    switch (data.notice_type) {\n      case 'group_recall':\n        session.type = 'message-deleted'\n        session.subtype = 'group'\n        break\n      case 'friend_recall':\n        session.type = 'message-deleted'\n        session.subtype = 'private'\n        session.channelId = `private:${session.userId}`\n        break\n      case 'friend_add':\n        session.type = 'friend-added'\n        break\n      case 'group_upload':\n        session.type = 'group-file-added'\n        break\n      case 'group_admin':\n        session.type = 'group-member'\n        session.subtype = 'role'\n        break\n      case 'group_ban':\n        session.type = 'group-member'\n        session.subtype = 'ban'\n        break\n      case 'group_decrease':\n        session.type = session.userId === session.selfId ? 'group-deleted' : 'group-member-deleted'\n        session.subtype = session.userId === session.operatorId ? 'active' : 'passive'\n        break\n      case 'group_increase':\n        session.type = session.userId === session.selfId ? 'group-added' : 'group-member-added'\n        session.subtype = session.userId === session.operatorId ? 'active' : 'passive'\n        break\n      case 'group_card':\n        session.type = 'group-member'\n        session.subtype = 'nickname'\n        break\n      case 'notify':\n        session.type = 'notice'\n        session.subtype = paramCase(data.sub_type)\n        if (session.subtype === 'poke') {\n          session.channelId ||= `private:${session.userId}`\n        } else if (session.subtype === 'honor') {\n          session.subsubtype = paramCase(data.honor_type)\n        }\n        break\n    }\n  } else return\n\n  return new Session(adapter.app, session)\n}\n\nlet counter = 0\nconst listeners: Record<number, (response: OneBot.Response) => void> = {}\n\nexport function connect(bot: CQBot) {\n  return new Promise<void>((resolve, reject) => {\n    bot.socket.on('message', (data) => {\n      data = data.toString()\n      let parsed: any\n      try {\n        parsed = JSON.parse(data)\n      } catch (error) {\n        return logger.warn('cannot parse message', data)\n      }\n\n      if ('post_type' in parsed) {\n        logger.debug('receive %o', parsed)\n        const session = createSession(bot.adapter, parsed)\n        if (session) bot.adapter.dispatch(session)\n      } else if (parsed.echo === -1) {\n        Object.assign(bot, adaptUser(camelCase(parsed.data)))\n        logger.debug('%d got self info', parsed.data)\n        if (bot.server) {\n          logger.info('connected to %c', bot.server)\n        }\n        resolve()\n      } else if (parsed.echo in listeners) {\n        listeners[parsed.echo](parsed)\n        delete listeners[parsed.echo]\n      }\n    })\n\n    bot.socket.on('close', () => {\n      delete bot._request\n    })\n\n    bot.socket.send(JSON.stringify({\n      action: 'get_login_info',\n      echo: -1,\n    }), (error) => {\n      if (error) reject(error)\n    })\n\n    bot._request = (action, params) => {\n      const data = { action, params, echo: ++counter }\n      data.echo = ++counter\n      return new Promise((resolve, reject) => {\n        listeners[data.echo] = resolve\n        setTimeout(() => {\n          delete listeners[data.echo]\n          reject(new Error('response timeout'))\n        }, bot.app.options.onebot.responseTimeout)\n        bot.socket.send(JSON.stringify(data), (error) => {\n          if (error) reject(error)\n        })\n      })\n    }\n  })\n}\n", "export interface Response {\n  status: string\n  retcode: number\n  data: any\n  echo?: number\n}\n\nexport interface MessageId {\n  messageId: number\n}\n\nexport interface AccountInfo {\n  userId: string\n  nickname: string\n}\n\nexport interface StrangerInfo extends AccountInfo {\n  sex: 'male' | 'female' | 'unknown'\n  age: number\n}\n\nexport interface TalkativeMemberInfo extends AccountInfo {\n  avatar: string\n  dayCount: number\n}\n\nexport type GroupRole = 'member' | 'admin' | 'owner'\nexport type HonorType = 'talkative' | 'performer' | 'legend' | 'strong_newbie' | 'emotion'\n\nexport interface HonoredMemberInfo {\n  avatar: string\n  description: string\n}\n\nexport interface HonorInfo {\n  currentTalkative: TalkativeMemberInfo\n  talkativeList: HonoredMemberInfo[]\n  performerList: HonoredMemberInfo[]\n  legendList: HonoredMemberInfo[]\n  strongNewbieList: HonoredMemberInfo[]\n  emotionList: HonoredMemberInfo[]\n}\n\nexport interface SenderInfo extends StrangerInfo {\n  area?: string\n  level?: string\n  title?: string\n  role?: GroupRole\n  card?: string\n}\n\nexport interface Message extends MessageId {\n  realId: number\n  time: number\n  messageType: 'private' | 'group'\n  sender: SenderInfo\n  message: string\n  anonymous?: AnonymousInfo\n}\n\nexport interface AnonymousInfo {\n  id: number\n  name: string\n  flag: string\n}\n\nexport type RecordFormat = 'mp3' | 'amr' | 'wma' | 'm4a' | 'spx' | 'ogg' | 'wav' | 'flac'\nexport type DataDirectory = 'image' | 'record' | 'show' | 'bface'\n\nexport interface FriendInfo extends AccountInfo {\n  remark: string\n}\n\nexport interface GroupBase {\n  groupId: number\n  groupName: string\n}\n\nexport interface GroupInfo extends GroupBase {\n  memberCount: number\n  maxMemberCount: number\n}\n\nexport interface GroupMemberInfo extends SenderInfo {\n  cardChangeable: boolean\n  groupId: number\n  joinTime: number\n  lastSentTime: number\n  titleExpireTime: number\n  unfriendly: boolean\n}\n\nexport interface Credentials {\n  cookies: string\n  csrfToken: number\n}\n\nexport interface ImageInfo {\n  file: string\n}\n\nexport interface RecordInfo {\n  file: string\n}\n\nexport interface VersionInfo {\n  coolqDirectory: string\n  coolqEdition: 'air' | 'pro'\n  pluginVersion: string\n  pluginBuildNumber: number\n  pluginBuildConfiguration: 'debug' | 'release'\n  version?: string\n  goCqhttp?: boolean\n  runtimeVersion?: string\n  runtimeOs?: string\n}\n\nexport interface ImageInfo {\n  size?: number\n  filename?: string\n  url?: string\n}\n\nexport interface ForwardMessage {\n  sender: AccountInfo\n  time: number\n  content: string\n}\n\nexport interface EssenceMessage extends MessageId {\n  senderId: number\n  senderNick: string\n  senderTime: number\n  operatorId: number\n  operatorNick: string\n  operatorTime: number\n}\n\ninterface CQNode {\n  type: 'node'\n  data: {\n    id: number\n  } | {\n    name: string\n    uin: number\n    content: string\n  }\n}\n\nexport interface VipInfo extends AccountInfo {\n  level: number\n  levelSpeed: number\n  vipLevel: number\n  vipGrowthSpeed: number\n  vipGrowthTotal: string\n}\n\nexport interface GroupNotice {\n  cn: number\n  fid: string\n  fn: number\n  msg: {\n    text: string\n    textFace: string\n    title: string\n  }\n  pubt: number\n  readNum: number\n  settings: {\n    isShowEditCard: number\n    remindTs: number\n  }\n  u: number\n  vn: number\n}\n\nexport interface Statistics {\n  packetReceived: number\n  packetSent: number\n  packetLost: number\n  messageReceived: number\n  messageSent: number\n  disconnectTimes: number\n  lostTimes: number\n}\n\nexport interface StatusInfo {\n  appInitialized: boolean\n  appEnabled: boolean\n  pluginsGood: boolean\n  appGood: boolean\n  online: boolean\n  good: boolean\n  stat: Statistics\n}\n\nexport interface TextDetection {\n  text: string\n  confidence: string\n  coordinates: any\n}\n\nexport interface OcrResult {\n  language: string\n  texts: TextDetection[]\n}\n\nexport interface GroupRequest extends GroupBase {\n  requestId: number\n  invitorUin: number\n  invitorNick: string\n  checked: boolean\n  actor: number\n}\n\nexport interface InvitedRequest extends GroupRequest {}\n\nexport interface JoinRequest extends GroupRequest {\n  message: string\n}\n\nexport interface GroupSystemMessageInfo {\n  invitedRequests: InvitedRequest[]\n  joinRequests: JoinRequest[]\n}\n\nexport interface GroupFileSystemInfo {\n  fileCount: number\n  limitCount: number\n  usedSpace: number\n  totalSpace: number\n}\n\nexport interface GroupFile {\n  fileId: string\n  fileName: string\n  busid: number\n  fileSize: number\n  uploadTime: number\n  deadTime: number\n  modifyTime: number\n  downloadTime: number\n  uploader: number\n  uploaderName: string\n}\n\nexport interface GroupFolder {\n  folderId: string\n  folderName: string\n  createTime: number\n  creator: number\n  creatorName: string\n  totalFileCount: number\n}\n\nexport interface GroupFileList {\n  files: GroupFile[]\n  folders: GroupFolder[]\n}\n\nexport interface AtAllRemain {\n  canAtAll: boolean\n  remainAtAllCountForGroup: number\n  remainAtAllCountForUin: number\n}\n\nexport interface Device {\n  appId: number\n  deviceName: string\n  deviceKind: string\n}\n\nexport interface ModelVariant {\n  modelShow: string\n  needPay: boolean\n}\n\nexport enum SafetyLevel { safe, unknown, danger }\n\ntype id = string | number\n\nexport interface API {\n  $sendPrivateMsg(userId: id, message: string, autoEscape?: boolean): Promise<number>\n  $sendPrivateMsgAsync(userId: id, message: string, autoEscape?: boolean): Promise<void>\n  $sendGroupMsg(groupId: id, message: string, autoEscape?: boolean): Promise<number>\n  $sendGroupMsgAsync(groupId: id, message: string, autoEscape?: boolean): Promise<void>\n  $sendGroupForwardMsg(groupId: id, messages: readonly CQNode[]): Promise<number>\n  $sendGroupForwardMsgAsync(groupId: id, messages: readonly CQNode[]): Promise<void>\n  $deleteMsg(messageId: id): Promise<void>\n  $deleteMsgAsync(messageId: id): Promise<void>\n  $setEssenceMsg(messageId: id): Promise<void>\n  $setEssenceMsgAsync(messageId: id): Promise<void>\n  $deleteEssenceMsg(messageId: id): Promise<void>\n  $deleteEssenceMsgAsync(messageId: id): Promise<void>\n  $sendLike(userId: id, times?: number): Promise<void>\n  $sendLikeAsync(userId: id, times?: number): Promise<void>\n  $getMsg(messageId: id): Promise<Message>\n  $getForwardMsg(messageId: id): Promise<ForwardMessage[]>\n  $getEssenceMsgList(groupId: id): Promise<EssenceMessage[]>\n  $getWordSlices(content: string): Promise<string[]>\n  $ocrImage(image: string): Promise<OcrResult>\n  $getGroupMsgHistory(groupId: id, messageSeq: id): Promise<Message[]>\n  $deleteFriend(userId: id): Promise<void>\n  $deleteFriendAsync(userId: id): Promise<void>\n  $setFriendAddRequest(flag: string, approve: boolean, remark?: string): Promise<void>\n  $setFriendAddRequestAsync(flag: string, approve: boolean, remark?: string): Promise<void>\n  $setGroupAddRequest(flag: string, subType: 'add' | 'invite', approve: boolean, reason?: string): Promise<void>\n  $setGroupAddRequestAsync(flag: string, subType: 'add' | 'invite', approve: boolean, reason?: string): Promise<void>\n\n  $setGroupKick(groupId: id, userId: id, rejectAddRequest?: boolean): Promise<void>\n  $setGroupKickAsync(groupId: id, userId: id, rejectAddRequest?: boolean): Promise<void>\n  $setGroupBan(groupId: id, userId: id, duration?: number): Promise<void>\n  $setGroupBanAsync(groupId: id, userId: id, duration?: number): Promise<void>\n  $setGroupWholeBan(groupId: id, enable?: boolean): Promise<void>\n  $setGroupWholeBanAsync(groupId: id, enable?: boolean): Promise<void>\n  $setGroupAdmin(groupId: id, userId: id, enable?: boolean): Promise<void>\n  $setGroupAdminAsync(groupId: id, userId: id, enable?: boolean): Promise<void>\n  $setGroupAnonymous(groupId: id, enable?: boolean): Promise<void>\n  $setGroupAnonymousAsync(groupId: id, enable?: boolean): Promise<void>\n  $setGroupCard(groupId: id, userId: id, card?: string): Promise<void>\n  $setGroupCardAsync(groupId: id, userId: id, card?: string): Promise<void>\n  $setGroupLeave(groupId: id, isDismiss?: boolean): Promise<void>\n  $setGroupLeaveAsync(groupId: id, isDismiss?: boolean): Promise<void>\n  $setGroupSpecialTitle(groupId: id, userId: id, specialTitle?: string, duration?: number): Promise<void>\n  $setGroupSpecialTitleAsync(groupId: id, userId: id, specialTitle?: string, duration?: number): Promise<void>\n  $setGroupName(groupId: id, name: string): Promise<void>\n  $setGroupNameAsync(groupId: id, name: string): Promise<void>\n  $setGroupPortrait(groupId: id, file: string, cache?: boolean): Promise<void>\n  $setGroupPortraitAsync(groupId: id, file: string, cache?: boolean): Promise<void>\n  $getGroupAtAllRemain(groupId: id): Promise<AtAllRemain>\n  $sendGroupNotice(groupId: id, content: string): Promise<void>\n  $sendGroupNoticeAsync(groupId: id, content: string): Promise<void>\n\n  $getLoginInfo(): Promise<AccountInfo>\n  $getVipInfo(): Promise<VipInfo>\n  $getStrangerInfo(userId: id, noCache?: boolean): Promise<StrangerInfo>\n  $getFriendList(): Promise<FriendInfo[]>\n  $getGroupInfo(groupId: id, noCache?: boolean): Promise<GroupInfo>\n  $getGroupList(): Promise<GroupInfo[]>\n  $getGroupMemberInfo(groupId: id, userId: id, noCache?: boolean): Promise<GroupMemberInfo>\n  $getGroupMemberList(groupId: id, noCache?: boolean): Promise<GroupMemberInfo[]>\n  $getGroupHonorInfo(groupId: id, type: HonorType): Promise<HonorInfo>\n  $getGroupSystemMsg(): Promise<GroupSystemMessageInfo>\n  $getGroupFileSystemInfo(groupId: id): Promise<GroupFileSystemInfo>\n  $getGroupRootFiles(groupId: id): Promise<GroupFileList>\n  $getGroupFilesByFolder(groupId: id, folderId: string): Promise<GroupFileList>\n  $getGroupFileUrl(groupId: id, fileId: string, busid: number): Promise<string>\n  $downloadFile(url: string, headers?: string | string[], threadCount?: number): Promise<string>\n  $uploadGroupFile(groupId: id, file: string, name: string, folder?: string): Promise<void>\n  $createGroupFileFolder(groupId: id, folderId: string, name: string): Promise<void>\n  $deleteGroupFolder(groupId: id, folderId: string): Promise<void>\n  $deleteGroupFile(groupId: id, folderId: string, fileId: string, busid: number): Promise<void>\n  $getOnlineClients(noCache?: boolean): Promise<Device[]>\n  $checkUrlSafely(url: string): Promise<SafetyLevel>\n  $getModelShow(model: string): Promise<ModelVariant[]>\n  $setModelShow(model: string, modelShow: string): Promise<void>\n\n  $getCookies(domain?: string): Promise<string>\n  $getCsrfToken(): Promise<number>\n  $getCredentials(domain?: string): Promise<Credentials>\n  $getRecord(file: string, outFormat: RecordFormat, fullPath?: boolean): Promise<RecordInfo>\n  $getImage(file: string): Promise<ImageInfo>\n  $canSendImage(): Promise<boolean>\n  $canSendRecord(): Promise<boolean>\n  $getStatus(): Promise<StatusInfo>\n  $getVersionInfo(): Promise<VersionInfo>\n  $setRestart(delay?: number): Promise<void>\n  $reloadEventFilter(): Promise<void>\n}\n", "import { Bot, Session, segment, camelCase, snakeCase, BotOptions, Adapter } from 'koishi-core'\nimport * as OneBot from './utils'\n\nexport class SenderError extends Error {\n  constructor(args: Record<string, any>, url: string, retcode: number, selfId: string) {\n    super(`Error when trying to send to ${url}, args: ${JSON.stringify(args)}, retcode: ${retcode}`)\n    Object.defineProperties(this, {\n      name: { value: 'SenderError' },\n      selfId: { value: selfId },\n      code: { value: retcode },\n      args: { value: args },\n      url: { value: url },\n    })\n  }\n}\n\nfunction renderText(source: string) {\n  return segment.parse(source).reduce((prev, { type, data }) => {\n    if (type === 'at') {\n      if (data.type === 'all') return prev + '[CQ:at,qq=all]'\n      return prev + `[CQ:at,qq=${data.id}]`\n    } else if (['video', 'audio', 'image'].includes(type)) {\n      if (type === 'audio') type = 'record'\n      if (!data.file) data.file = data.url\n    } else if (type === 'quote') {\n      type = 'reply'\n    }\n    return prev + segment(type, data)\n  }, '')\n}\n\nexport interface CQBot extends OneBot.API {}\n\nexport class CQBot extends Bot {\n  version = 'onebot'\n\n  _request?(action: string, params: Record<string, any>): Promise<OneBot.Response>\n\n  constructor(adapter: Adapter<'onebot'>, options: BotOptions) {\n    super(adapter, options)\n    this.avatar = `http://q.qlogo.cn/headimg_dl?dst_uin=${options.selfId}&spec=640`\n  }\n\n  async [Session.send](message: Session, content: string) {\n    if (!content) return\n    const { userId, groupId, channelId, channelName } = message\n    if (!this.app.options.onebot?.quickOperation) {\n      await this.sendMessage(channelId, content)\n      return\n    }\n\n    let id: string\n    const session = this.createSession({ content, channelId, channelName })\n    if (groupId) {\n      id = session.groupId = groupId\n      session.subtype = 'group'\n    } else {\n      id = session.userId = userId\n      session.subtype = 'private'\n    }\n\n    if (await this.app.serial(session, 'before-send', session)) return\n    content = renderText(session.content)\n\n    if (message._response) {\n      return message._response({ reply: content, atSender: false })\n    }\n\n    return groupId\n      ? this.$sendGroupMsgAsync(id, content)\n      : this.$sendPrivateMsgAsync(id, content)\n  }\n\n  async get<T = any>(action: string, params = {}, silent = false): Promise<T> {\n    this.logger.debug('[request] %s %o', action, params)\n    const response = await this._request(action, snakeCase(params))\n    this.logger.debug('[response] %o', response)\n    const { data, retcode } = response\n    if (retcode === 0 && !silent) {\n      return camelCase(data)\n    } else if (retcode < 0 && !silent) {\n      throw new SenderError(params, action, retcode, this.selfId)\n    } else if (retcode > 1) {\n      throw new SenderError(params, action, retcode, this.selfId)\n    }\n  }\n\n  async getAsync(action: string, params = {}) {\n    await this.get(action + '_async', params)\n  }\n\n  sendMessage(channelId: string, content: string) {\n    content = renderText(content)\n    return channelId.startsWith('private:')\n      ? this.sendPrivateMessage(channelId.slice(8), content)\n      : this.sendGroupMessage(channelId, content)\n  }\n\n  async getMessage(channelId: string, messageId: string) {\n    const data = await this.$getMsg(messageId)\n    return OneBot.adaptMessage(data)\n  }\n\n  async deleteMessage(channelId: string, messageId: string) {\n    await this.$deleteMsg(messageId)\n  }\n\n  async getSelf() {\n    const data = await this.$getLoginInfo()\n    return OneBot.adaptUser(data)\n  }\n\n  async getUser(userId: string) {\n    const data = await this.$getStrangerInfo(userId)\n    return OneBot.adaptUser(data)\n  }\n\n  async getFriendList() {\n    const data = await this.$getFriendList()\n    return data.map(OneBot.adaptUser)\n  }\n\n  async getChannel(channelId: string) {\n    const data = await this.$getGroupInfo(channelId)\n    return OneBot.adaptChannel(data)\n  }\n\n  async getGroup(groupId: string) {\n    const data = await this.$getGroupInfo(groupId)\n    return OneBot.adaptGroup(data)\n  }\n\n  async getGroupList() {\n    const data = await this.$getGroupList()\n    return data.map(OneBot.adaptGroup)\n  }\n\n  async getGroupMember(groupId: string, userId: string) {\n    const data = await this.$getGroupMemberInfo(groupId, userId)\n    return OneBot.adaptGroupMember(data)\n  }\n\n  async getGroupMemberList(groupId: string) {\n    const data = await this.$getGroupMemberList(groupId)\n    return data.map(OneBot.adaptGroupMember)\n  }\n\n  async sendGroupMessage(groupId: string, content: string) {\n    if (!content) return\n    const session = this.createSession({ content, subtype: 'group', groupId, channelId: groupId })\n    if (this.app.bail(session, 'before-send', session)) return\n    session.messageId = '' + await this.$sendGroupMsg(groupId, content)\n    this.app.emit(session, 'send', session)\n    return session.messageId\n  }\n\n  async sendPrivateMessage(userId: string, content: string) {\n    if (!content) return\n    const session = this.createSession({ content, subtype: 'private', userId, channelId: 'private:' + userId })\n    if (this.app.bail(session, 'before-send', session)) return\n    session.messageId = '' + await this.$sendPrivateMsg(userId, content)\n    this.app.emit(session, 'send', session)\n    return session.messageId\n  }\n\n  async $setGroupAnonymousBan(groupId: string, meta: string | object, duration?: number) {\n    const args = { groupId, duration } as any\n    args[typeof meta === 'string' ? 'flag' : 'anonymous'] = meta\n    await this.get('set_group_anonymous_ban', args)\n  }\n\n  $setGroupAnonymousBanAsync(groupId: string, meta: string | object, duration?: number) {\n    const args = { groupId, duration } as any\n    args[typeof meta === 'string' ? 'flag' : 'anonymous'] = meta\n    return this.getAsync('set_group_anonymous_ban', args)\n  }\n\n  async handleFriendRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.$setFriendAddRequest(messageId, approve, comment)\n  }\n\n  async handleGroupRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.$setGroupAddRequest(messageId, 'invite', approve, comment)\n  }\n\n  async handleGroupMemberRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.$setGroupAddRequest(messageId, 'add', approve, comment)\n  }\n\n  async deleteFriend(userId: string) {\n    await this.$deleteFriend(userId)\n  }\n\n  async getStatus() {\n    if (this.status !== Bot.Status.GOOD) return this.status\n    try {\n      const data = await this.$getStatus()\n      return data.good ? Bot.Status.GOOD : data.online ? Bot.Status.SERVER_ERROR : Bot.Status.BOT_OFFLINE\n    } catch {\n      return Bot.Status.NET_ERROR\n    }\n  }\n}\n\nconst asyncPrefixes = ['$set', '$send', '$delete', '$create', '$upload']\n\nfunction prepareMethod(name: string) {\n  const prop = '$' + camelCase(name.replace(/^[_.]/, ''))\n  const isAsync = asyncPrefixes.some(prefix => prop.startsWith(prefix))\n  return [prop, isAsync] as const\n}\n\nfunction define(name: string, ...params: string[]) {\n  const [prop, isAsync] = prepareMethod(name)\n  CQBot.prototype[prop] = async function (this: CQBot, ...args: any[]) {\n    const data = await this.get(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n    if (!isAsync) return data\n  }\n  isAsync && (CQBot.prototype[prop + 'Async'] = async function (this: CQBot, ...args: any[]) {\n    await this.getAsync(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n  })\n}\n\nfunction defineExtract(name: string, key: string, ...params: string[]) {\n  key = camelCase(key)\n  const [prop, isAsync] = prepareMethod(name)\n  CQBot.prototype[prop] = async function (this: CQBot, ...args: any[]) {\n    const data = await this.get(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n    return data[key]\n  }\n  isAsync && (CQBot.prototype[prop + 'Async'] = async function (this: CQBot, ...args: any[]) {\n    await this.getAsync(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n  })\n}\n\ndefineExtract('send_private_msg', 'message_id', 'user_id', 'message', 'auto_escape')\ndefineExtract('send_group_msg', 'message_id', 'group_id', 'message', 'auto_escape')\ndefineExtract('send_group_forward_msg', 'message_id', 'group_id', 'messages')\ndefine('delete_msg', 'message_id')\ndefine('set_essence_msg', 'message_id')\ndefine('delete_essence_msg', 'message_id')\ndefine('send_like', 'user_id', 'times')\ndefine('get_msg', 'message_id')\ndefine('get_essence_msg_list', 'group_id')\ndefine('ocr_image', 'image')\ndefineExtract('get_forward_msg', 'messages', 'message_id')\ndefineExtract('.get_word_slices', 'slices', 'content')\ndefine('get_group_msg_history', 'group_id', 'message_seq')\ndefine('set_friend_add_request', 'flag', 'approve', 'remark')\ndefine('set_group_add_request', 'flag', 'sub_type', 'approve', 'reason')\ndefineExtract('_get_model_show', 'variants', 'model')\ndefine('_set_model_show', 'model', 'model_show')\n\ndefine('set_group_kick', 'group_id', 'user_id', 'reject_add_request')\ndefine('set_group_ban', 'group_id', 'user_id', 'duration')\ndefine('set_group_whole_ban', 'group_id', 'enable')\ndefine('set_group_admin', 'group_id', 'user_id', 'enable')\ndefine('set_group_anonymous', 'group_id', 'enable')\ndefine('set_group_card', 'group_id', 'user_id', 'card')\ndefine('set_group_leave', 'group_id', 'is_dismiss')\ndefine('set_group_special_title', 'group_id', 'user_id', 'special_title', 'duration')\ndefine('set_group_name', 'group_id', 'group_name')\ndefine('set_group_portrait', 'group_id', 'file', 'cache')\ndefine('_send_group_notice', 'group_id', 'content')\ndefine('get_group_at_all_remain', 'group_id')\n\ndefine('get_login_info')\ndefine('get_stranger_info', 'user_id', 'no_cache')\ndefine('_get_vip_info', 'user_id')\ndefine('get_friend_list')\ndefine('get_group_info', 'group_id', 'no_cache')\ndefine('get_group_list')\ndefine('get_group_member_info', 'group_id', 'user_id', 'no_cache')\ndefine('get_group_member_list', 'group_id')\ndefine('get_group_honor_info', 'group_id', 'type')\ndefine('get_group_system_msg')\ndefine('get_group_file_system_info', 'group_id')\ndefine('get_group_root_files', 'group_id')\ndefine('get_group_files_by_folder', 'group_id', 'folder_id')\ndefine('upload_group_file', 'group_id', 'file', 'name', 'folder')\ndefine('create_group_file_folder', 'group_id', 'folder_id', 'name')\ndefine('delete_group_folder', 'group_id', 'folder_id')\ndefine('delete_group_file', 'group_id', 'folder_id', 'file_id', 'busid')\ndefineExtract('get_group_file_url', 'url', 'group_id', 'file_id', 'busid')\ndefineExtract('download_file', 'file', 'url', 'headers', 'thread_count')\ndefineExtract('get_online_clients', 'clients', 'no_cache')\ndefineExtract('check_url_safely', 'level', 'url')\ndefine('delete_friend', 'user_id')\n\ndefineExtract('get_cookies', 'cookies', 'domain')\ndefineExtract('get_csrf_token', 'token')\ndefine('get_credentials', 'domain')\ndefine('get_record', 'file', 'out_format', 'full_path')\ndefine('get_image', 'file')\ndefineExtract('can_send_image', 'yes')\ndefineExtract('can_send_record', 'yes')\ndefine('get_status')\ndefine('get_version_info')\ndefine('set_restart', 'delay')\ndefine('reload_event_filter')\n", "import { App, Adapter, Bot } from 'koishi-core'\nimport { Logger, defineProperty, snakeCase, assertProperty } from 'koishi-utils'\nimport { CQBot } from './bot'\nimport { createSession } from './utils'\nimport { createHmac } from 'crypto'\nimport axios from 'axios'\n\nexport interface ResponsePayload {\n  delete?: boolean\n  ban?: boolean\n  banDuration?: number\n  kick?: boolean\n  reply?: string\n  autoEscape?: boolean\n  atSender?: boolean\n  approve?: boolean\n  remark?: string\n  reason?: string\n}\n\nconst logger = new Logger('onebot')\n\nexport default class HttpServer extends Adapter<'onebot'> {\n  constructor(app: App) {\n    assertProperty(app.options, 'port')\n    super(app, CQBot)\n  }\n\n  private async _listen(bot: CQBot) {\n    if (!bot.server) return\n    bot.status = Bot.Status.GOOD\n    bot._request = async (action, params) => {\n      const headers = { 'Content-Type': 'application/json' } as any\n      if (bot.token) {\n        headers.Authorization = `Token ${bot.token}`\n      }\n      const uri = new URL(action, bot.server).href\n      const { data } = await axios.post(uri, params, { headers })\n      return data\n    }\n    Object.assign(bot, await bot.getSelf())\n    logger.info('connected to %c', bot.server)\n  }\n\n  async start() {\n    const { onebot = {} } = this.app.options\n    const { secret, path = '/onebot' } = onebot\n    this.app.router.post(path, (ctx) => {\n      if (secret) {\n        // no signature\n        const signature = ctx.headers['x-signature']\n        if (!signature) return ctx.status = 401\n\n        // invalid signature\n        const sig = createHmac('sha1', secret).update(ctx.request.rawBody).digest('hex')\n        if (signature !== `sha1=${sig}`) return ctx.status = 403\n      }\n\n      logger.debug('receive %o', ctx.request.body)\n      const session = createSession(this, ctx.request.body)\n\n      const { quickOperation } = onebot\n      if (session && quickOperation > 0) {\n        // bypass koa's built-in response handling for quick operations\n        ctx.respond = false\n        ctx.res.writeHead(200, {\n          'Content-Type': 'application/json',\n        })\n\n        // use defineProperty to avoid meta duplication\n        defineProperty(session, '$response', (data: any) => {\n          session._response = null\n          clearTimeout(timer)\n          ctx.res.write(JSON.stringify(snakeCase(data)))\n          ctx.res.end()\n        })\n\n        const timer = setTimeout(() => {\n          session._response = null\n          ctx.res.end()\n        }, quickOperation)\n      }\n\n      // dispatch events\n      if (session) this.dispatch(session)\n    })\n\n    await Promise.all(this.bots.map(bot => this._listen(bot)))\n  }\n\n  stop() {\n    logger.debug('http server closing')\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

import * as Koishi from 'koishi-core';
import { Pool, PoolConfig, TypeCast } from 'mysql';
import { App, Database, Context } from 'koishi-core';
declare module 'mysql' {
    interface UntypedFieldInfo {
        packet: UntypedFieldInfo;
    }
}
export type TableType = keyof Tables;
export interface Tables extends Koishi.Tables {
}
export interface Config extends PoolConfig {
}
interface MysqlDatabase extends Database {
}
declare class MysqlDatabase {
    app: App;
    pool: Pool;
    config: Config;
    mysql: this;
    escape: (value: any, table?: TableType, field?: string) => string;
    escapeId: (value: string) => string;
    inferFields<T extends TableType>(table: T, keys: readonly string[]): (keyof Tables[T])[];
    constructor(app: App, config?: Config);
    private columns;
    private getColDefs;
    start(): Promise<void>;
    joinKeys: (keys: readonly string[]) => string;
    $in: (table: TableType, key: string, values: readonly any[]) => string;
    formatValues: (table: string, data: object, keys: readonly string[]) => any[];
    query<T extends {}>(source: string, values?: any): Promise<T>;
    query<T extends {}>(source: string[], values?: any): Promise<T>;
    select<T extends {}>(table: string, fields: readonly (string & keyof T)[], conditional?: string, values?: readonly any[]): Promise<T[]>;
    count<K extends TableType>(table: K, conditional?: string): Promise<number>;
    stop(): void;
}
declare namespace MysqlDatabase {
    type Declarations = {
        [T in TableType]?: {
            [K in keyof Tables[T]]?: string | (() => string) | Domain<Tables[T][K]>;
        };
    };
    /**
     * @deprecated use `import('koishi-core').Field` instead
     */
    export const tables: Declarations;
    type FieldInfo = Parameters<Exclude<TypeCast, boolean>>[0];
    export interface Domain<T = any> {
        definition: string;
        parse(source: FieldInfo): T;
        stringify(value: T): string;
    }
    /**
     * @deprecated use `import('koishi-core').Field` instead
     */
    export namespace Domain {
        function definition(domain: string | Domain): string;
        class String implements Domain<string> {
            definition: string;
            constructor(definition?: string);
            parse(field: FieldInfo): string;
            stringify(value: any): any;
        }
        class Array implements Domain<string[]> {
            definition: string;
            constructor(definition?: string);
            parse(field: FieldInfo): string[];
            stringify(value: string[]): string;
        }
        class Json implements Domain {
            definition: string;
            private defaultValue?;
            constructor(definition?: string, defaultValue?: any);
            parse(field: FieldInfo): any;
            stringify(value: any): string;
        }
    }
    export {};
}
declare module 'koishi-core' {
    interface Database {
        mysql: MysqlDatabase;
    }
    namespace Database {
        interface Statics {
            'koishi-plugin-mysql': typeof MysqlDatabase;
        }
    }
}
export const name = "mysql";
export function apply(ctx: Context, config?: Config): void;export default MysqlDatabase;

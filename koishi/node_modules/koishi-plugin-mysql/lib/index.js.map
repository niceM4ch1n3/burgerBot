{
  "version": 3,
  "sources": ["../src/index.ts", "../src/database.ts"],
  "sourcesContent": ["import MysqlDatabase, { Config } from './database'\nimport { User, Channel, Database, Context, Query, Eval } from 'koishi-core'\nimport { difference } from 'koishi-utils'\nimport { OkPacket, escapeId, escape } from 'mysql'\nimport * as Koishi from 'koishi-core'\n\nexport * from './database'\nexport default MysqlDatabase\n\ndeclare module 'koishi-core' {\n  interface Database {\n    mysql: MysqlDatabase\n  }\n\n  namespace Database {\n    interface Statics {\n      'koishi-plugin-mysql': typeof MysqlDatabase\n    }\n  }\n}\n\nfunction createMemberQuery(key: string, value: any[], notStr = '') {\n  if (!value.length) return notStr ? '1' : '0'\n  return `${key}${notStr} IN (${value.map(val => escape(val)).join(', ')})`\n}\n\nfunction createRegExpQuery(key: string, value: RegExp) {\n  return `${key} REGEXP ${escape(value.source)}`\n}\n\nfunction createElementQuery(key: string, value: any) {\n  return `FIND_IN_SET(${escape(value)}, ${key})`\n}\n\nfunction comparator(operator: string) {\n  return function (key: string, value: any) {\n    return `${key} ${operator} ${escape(value)}`\n  }\n}\n\nconst createEqualQuery = comparator('=')\n\ntype QueryOperators = {\n  [K in keyof Query.FieldExpr]?: (key: string, value: Query.FieldExpr[K]) => string\n}\n\nconst queryOperators: QueryOperators = {\n  // comparison\n  $eq: createEqualQuery,\n  $ne: comparator('!='),\n  $gt: comparator('>'),\n  $gte: comparator('>='),\n  $lt: comparator('<'),\n  $lte: comparator('<='),\n\n  // membership\n  $in: (key, value) => createMemberQuery(key, value, ''),\n  $nin: (key, value) => createMemberQuery(key, value, ' NOT'),\n\n  // regexp\n  $regex: createRegExpQuery,\n  $regexFor: (key, value) => `${escape(value)} REGEXP ${key}`,\n\n  // bitwise\n  $bitsAllSet: (key, value) => `${key} & ${escape(value)} = ${escape(value)}`,\n  $bitsAllClear: (key, value) => `${key} & ${escape(value)} = 0`,\n  $bitsAnySet: (key, value) => `${key} & ${escape(value)} != 0`,\n  $bitsAnyClear: (key, value) => `${key} & ${escape(value)} != ${escape(value)}`,\n\n  // list\n  $el: (key, value) => {\n    if (Array.isArray(value)) {\n      return `(${value.map(value => createElementQuery(key, value)).join(' || ')})`\n    } else if (typeof value !== 'number' && typeof value !== 'string') {\n      throw new TypeError('query expr under $el is not supported')\n    } else {\n      return createElementQuery(key, value)\n    }\n  },\n  $size: (key, value) => {\n    if (!value) return `!${key}`\n    return `${key} && LENGTH(${key}) - LENGTH(REPLACE(${key}, \",\", \"\")) = ${escape(value)} - 1`\n  },\n}\n\ntype EvaluationOperators = {\n  [K in keyof Eval.GeneralExpr]?: (expr: Eval.GeneralExpr[K]) => string\n}\n\nfunction binary(operator: string) {\n  return function ([left, right]: [Eval.Any, Eval.Any]) {\n    return `(${parseEval(left)} ${operator} ${parseEval(right)})`\n  }\n}\n\nconst evalOperators: EvaluationOperators = {\n  // numeric\n  $add: (args) => `(${args.map(parseEval).join(' + ')})`,\n  $multiply: (args) => `(${args.map(parseEval).join(' * ')})`,\n  $subtract: binary('-'),\n  $divide: binary('/'),\n\n  // boolean\n  $eq: binary('='),\n  $ne: binary('!='),\n  $gt: binary('>'),\n  $gte: binary('>='),\n  $lt: binary('<'),\n  $lte: binary('<='),\n\n  // aggregation\n  $sum: (expr) => `ifnull(sum(${parseEval(expr)}), 0)`,\n  $avg: (expr) => `avg(${parseEval(expr)})`,\n  $min: (expr) => `$min(${parseEval(expr)})`,\n  $max: (expr) => `max(${parseEval(expr)})`,\n  $count: (expr) => `count(distinct ${parseEval(expr)})`,\n}\n\nfunction parseQuery(query: Query.Expr) {\n  const conditions: string[] = []\n  for (const key in query) {\n    // logical expression\n    if (key === '$not') {\n      conditions.push(`!(${parseQuery(query.$not)})`)\n      continue\n    } else if (key === '$and') {\n      conditions.push(...query.$and.map(parseQuery))\n      continue\n    } else if (key === '$or') {\n      if (!query.$or.length) return '0'\n      conditions.push(`(${query.$or.map(parseQuery).join(' || ')})`)\n      continue\n    } else if (key === '$expr') {\n      conditions.push(parseEval(query.$expr))\n      continue\n    }\n\n    // query shorthand\n    const value = query[key]\n    const escKey = escapeId(key)\n    if (Array.isArray(value)) {\n      conditions.push(createMemberQuery(escKey, value))\n      continue\n    } else if (value instanceof RegExp) {\n      conditions.push(createRegExpQuery(escKey, value))\n      continue\n    } else if (typeof value === 'string' || typeof value === 'number' || value instanceof Date) {\n      conditions.push(createEqualQuery(escKey, value))\n      continue\n    }\n\n    // query expression\n    for (const prop in value) {\n      if (prop in queryOperators) {\n        conditions.push(queryOperators[prop](escKey, value[prop]))\n      }\n    }\n  }\n\n  if (!conditions.length) return '1'\n  if (conditions.includes('0')) return '0'\n  return conditions.join(' && ')\n}\n\nfunction parseEval(expr: Eval.Any | Eval.Aggregation): string {\n  if (typeof expr === 'string') {\n    return escapeId(expr)\n  } else if (typeof expr === 'number' || typeof expr === 'boolean') {\n    return escape(expr)\n  }\n\n  for (const key in expr) {\n    if (key in evalOperators) {\n      return evalOperators[key](expr[key])\n    }\n  }\n}\n\nDatabase.extend(MysqlDatabase, {\n  async drop(name) {\n    if (name) {\n      await this.query(`DROP TABLE ${escapeId(name)}`)\n    } else {\n      const data = await this.select('information_schema.tables', ['TABLE_NAME'], 'TABLE_SCHEMA = ?', [this.config.database])\n      if (!data.length) return\n      await this.query(data.map(({ TABLE_NAME }) => `DROP TABLE ${escapeId(TABLE_NAME)}`).join('; '))\n    }\n  },\n\n  async get(name, query, modifier) {\n    const filter = parseQuery(Query.resolve(name, query))\n    if (filter === '0') return []\n    const { fields, limit, offset } = Query.resolveModifier(modifier)\n    const keys = this.joinKeys(this.inferFields(name, fields))\n    let sql = `SELECT ${keys} FROM ${name} _${name} WHERE ${filter}`\n    if (limit) sql += ' LIMIT ' + limit\n    if (offset) sql += ' OFFSET ' + offset\n    return this.query(sql)\n  },\n\n  async remove(name, query) {\n    const filter = parseQuery(Query.resolve(name, query))\n    if (filter === '0') return\n    await this.query('DELETE FROM ?? WHERE ' + filter, [name])\n  },\n\n  async create(name, data) {\n    data = { ...Koishi.Tables.create(name), ...data }\n    const keys = Object.keys(data)\n    const header = await this.query<OkPacket>(\n      `INSERT INTO ?? (${this.joinKeys(keys)}) VALUES (${keys.map(() => '?').join(', ')})`,\n      [name, ...this.formatValues(name, data, keys)],\n    )\n    return { ...data, id: header.insertId } as any\n  },\n\n  async update(name, data, key: string) {\n    if (!data.length) return\n    const { fields, primary } = Koishi.Tables.config[name]\n    const updateFields = Object.keys(data[0])\n    const fallback = Koishi.Tables.create(name)\n    const keys = Object.keys(fields)\n    key ||= primary\n    data = data.map(item => ({ ...fallback, ...item }))\n    const placeholder = `(${keys.map(() => '?').join(', ')})`\n    const update = difference(updateFields, [key]).map((key) => {\n      key = escapeId(key)\n      return `${key} = VALUES(${key})`\n    }).join(', ')\n    await this.query(\n      `INSERT INTO ${escapeId(name)} (${this.joinKeys(keys)}) VALUES ${data.map(() => placeholder).join(', ')}\n      ON DUPLICATE KEY UPDATE ${update}`,\n      [].concat(...data.map(data => this.formatValues(name, data, keys))),\n    )\n  },\n\n  async aggregate(name, fields, query) {\n    const keys = Object.keys(fields)\n    if (!keys.length) return {}\n\n    const filter = parseQuery(Query.resolve(name, query))\n    const exprs = keys.map(key => `${parseEval(fields[key])} AS ${escapeId(key)}`).join(', ')\n    const [data] = await this.query(`SELECT ${exprs} FROM ${name} WHERE ${filter}`)\n    return data\n  },\n\n  async getUser(type, id, modifier) {\n    const { fields } = Query.resolveModifier(modifier)\n    if (fields && !fields.length) {\n      return Array.isArray(id) ? id.map(id => ({ [type]: id })) : { [type]: id }\n    }\n    const data = await this.get('user', { [type]: id }, modifier)\n    if (Array.isArray(id)) return data\n    return data[0] && { ...data[0], [type]: id }\n  },\n\n  async createUser(type, id, data) {\n    data[type] = id\n    const newKeys = Object.keys(data)\n    const assignments = difference(newKeys, [type]).map((key) => {\n      key = this.escapeId(key)\n      return `${key} = VALUES(${key})`\n    }).join(', ')\n    const user = Object.assign(User.create(type, id), data)\n    const keys = Object.keys(user)\n    await this.query(\n      `INSERT INTO ?? (${this.joinKeys(keys)}) VALUES (${keys.map(() => '?').join(', ')})\n      ON DUPLICATE KEY UPDATE ${assignments}`,\n      ['user', ...this.formatValues('user', user, keys)],\n    )\n  },\n\n  async setUser(type, id, data) {\n    data[type] = id\n    const keys = Object.keys(data)\n    const assignments = difference(keys, [type]).map((key) => {\n      return `${this.escapeId(key)} = ${this.escape(data[key], 'user', key)}`\n    }).join(', ')\n    await this.query(`UPDATE ?? SET ${assignments} WHERE ?? = ?`, ['user', type, id])\n  },\n\n  async getChannel(type, pid, modifier) {\n    const { fields } = Query.resolveModifier(modifier)\n    if (fields && !fields.length) {\n      return Array.isArray(pid) ? pid.map(id => ({ id: `${type}:${id}` })) : { id: `${type}:${pid}` }\n    }\n    const id = Array.isArray(pid) ? pid.map(id => `${type}:${id}`) : `${type}:${pid}`\n    const data = await this.get('channel', { id }, modifier)\n    if (Array.isArray(pid)) return data\n    return data[0] && { ...data[0], id: `${type}:${pid}` }\n  },\n\n  async getAssignedChannels(fields, assignMap = this.app.getSelfIds()) {\n    return this.select<Channel>('channel', fields, Object.entries(assignMap).map(([type, ids]) => {\n      return [\n        `LEFT(\\`id\\`, ${type.length}) = ${this.escape(type)}`,\n        `\\`assignee\\` IN (${ids.map(id => this.escape(id)).join(',')})`,\n      ].join(' AND ')\n    }).join(' OR '))\n  },\n\n  async createChannel(type, pid, data) {\n    data.id = `${type}:${pid}`\n    const newKeys = Object.keys(data)\n    if (!newKeys.length) return\n    const assignments = difference(newKeys, ['id']).map((key) => {\n      key = this.escapeId(key)\n      return `${key} = VALUES(${key})`\n    })\n    const channel = Object.assign(Channel.create(type, pid), data)\n    const keys = Object.keys(channel)\n    await this.query(\n      `INSERT INTO ?? (${this.joinKeys(keys)}) VALUES (${keys.map(() => '?').join(', ')})\n      ON DUPLICATE KEY UPDATE ${assignments.join(', ')}`,\n      ['channel', ...this.formatValues('channel', channel, keys)],\n    )\n  },\n\n  async setChannel(type, pid, data) {\n    data.id = `${type}:${pid}`\n    const keys = Object.keys(data)\n    if (!keys.length) return\n    const assignments = difference(keys, ['id']).map((key) => {\n      return `${this.escapeId(key)} = ${this.escape(data[key], 'channel', key)}`\n    }).join(', ')\n    await this.query(`UPDATE ?? SET ${assignments} WHERE ?? = ?`, ['channel', 'id', data.id])\n  },\n})\n\nexport const name = 'mysql'\n\nexport function apply(ctx: Context, config: Config = {}) {\n  const db = new MysqlDatabase(ctx.app, config)\n  ctx.database = db\n  ctx.before('connect', () => db.start())\n  ctx.before('disconnect', () => db.stop())\n}\n", "import { createPool, Pool, PoolConfig, escape as mysqlEscape, escapeId, format, TypeCast } from 'mysql'\nimport { App, Database } from 'koishi-core'\nimport * as Koishi from 'koishi-core'\nimport { Logger, makeArray } from 'koishi-utils'\nimport { types } from 'util'\n\ndeclare module 'mysql' {\n  interface UntypedFieldInfo {\n    packet: UntypedFieldInfo\n  }\n}\n\nexport type TableType = keyof Tables\n\nexport interface Tables extends Koishi.Tables {}\n\nconst logger = new Logger('mysql')\n\nexport interface Config extends PoolConfig {}\n\ninterface MysqlDatabase extends Database {}\n\nfunction stringify(value: any, table?: string, field?: string) {\n  const type = MysqlDatabase.tables[table]?.[field]\n  if (typeof type === 'object') return type.stringify(value)\n\n  const meta = Koishi.Tables.config[table]?.fields[field]\n  if (meta?.type === 'json') {\n    return JSON.stringify(value)\n  } else if (meta?.type === 'list') {\n    return value.join(',')\n  }\n\n  return value\n}\n\nfunction escape(value: any, table?: string, field?: string) {\n  return mysqlEscape(stringify(value, table, field))\n}\n\nfunction getIntegerType(length = 11) {\n  if (length <= 4) return 'tinyint'\n  if (length <= 6) return 'smallint'\n  if (length <= 9) return 'mediumint'\n  if (length <= 11) return 'int'\n  return 'bigint'\n}\n\nfunction getTypeDefinition({ type, length, precision, scale }: Koishi.Tables.Field) {\n  switch (type) {\n    case 'float':\n    case 'double':\n    case 'date':\n    case 'time':\n    case 'timestamp': return type\n    case 'integer': return getIntegerType(length)\n    case 'unsigned': return `${getIntegerType(length)} unsigned`\n    case 'decimal': return `decimal(${precision}, ${scale}) unsigned`\n    case 'char': return `char(${length || 255})`\n    case 'string': return `char(${length || 255})`\n    case 'text': return `text(${length || 65535})`\n    case 'list': return `text(${length || 65535})`\n    case 'json': return `text(${length || 65535})`\n  }\n}\n\nfunction createIndex(keys: string | string[]) {\n  return makeArray(keys).map(key => escapeId(key)).join(', ')\n}\n\nclass MysqlDatabase {\n  public pool: Pool\n  public config: Config\n\n  mysql = this\n\n  escape: (value: any, table?: TableType, field?: string) => string\n  escapeId: (value: string) => string\n\n  inferFields<T extends TableType>(table: T, keys: readonly string[]) {\n    if (!keys) return\n    const types = MysqlDatabase.tables[table] || {}\n    return keys.map((key) => {\n      const type = types[key]\n      return typeof type === 'function' ? `${type()} AS ${key}` : key\n    }) as (keyof Tables[T])[]\n  }\n\n  constructor(public app: App, config?: Config) {\n    this.config = {\n      database: 'koishi',\n      charset: 'utf8mb4_general_ci',\n      multipleStatements: true,\n      typeCast: (field, next) => {\n        const { orgName, orgTable } = field.packet\n        const type = MysqlDatabase.tables[orgTable]?.[orgName]\n        if (typeof type === 'object') return type.parse(field)\n\n        const meta = Koishi.Tables.config[orgTable]?.fields[orgName]\n        if (meta?.type === 'string') {\n          return field.string()\n        } else if (meta?.type === 'json') {\n          return JSON.parse(field.string()) || meta.initial\n        } else if (meta?.type === 'list') {\n          const source = field.string()\n          return source ? source.split(',') : []\n        }\n\n        if (field.type === 'BIT') {\n          return Boolean(field.buffer()?.readUInt8(0))\n        } else {\n          return next()\n        }\n      },\n      ...config,\n    }\n  }\n\n  private columns: Record<string, string[]> = {}\n\n  private getColDefs(name: string, cols: string[] = []) {\n    const table = Koishi.Tables.config[name]\n    const { primary, foreign, type } = table\n    const fields = { ...table.fields }\n    const unique = [...table.unique]\n    const keys = this.columns[name] || []\n\n    // create platform rows\n    if (name === 'user') {\n      const platforms = new Set<string>(this.app.bots.map(bot => bot.platform))\n      for (const name of platforms) {\n        fields[name] = { type: 'string', length: 63 }\n        unique.push(name)\n      }\n    }\n\n    // mysql definitions (FIXME: remove in v4)\n    for (const key in MysqlDatabase.tables[name]) {\n      const value = MysqlDatabase.tables[name][key]\n      if (keys.includes(key) || typeof value === 'function') continue\n      cols.push(`${escapeId(key)} ${MysqlDatabase.Domain.definition(value)}`)\n    }\n\n    // orm definitions\n    for (const key in fields) {\n      if (keys.includes(key)) continue\n      const { initial, nullable = initial === undefined || initial === null } = fields[key]\n      let def = escapeId(key)\n      if (key === primary && type === 'incremental') {\n        def += ' bigint(20) unsigned not null auto_increment'\n      } else {\n        const typedef = getTypeDefinition(fields[key])\n        def += ' ' + typedef + (nullable ? ' ' : ' not ') + 'null'\n        // blob, text, geometry or json columns cannot have default values\n        if (initial && !typedef.startsWith('text')) {\n          def += ' default ' + escape(initial, name, key)\n        }\n      }\n      cols.push(def)\n    }\n\n    if (!keys.length) {\n      cols.push(`primary key (${createIndex(primary)})`)\n      for (const key of unique) {\n        cols.push(`unique index (${createIndex(key)})`)\n      }\n      for (const key in foreign) {\n        const [table, key2] = foreign[key]\n        cols.push(`foreign key (${escapeId(key)}) references ${escapeId(table)} (${escapeId(key2)})`)\n      }\n    }\n\n    return cols\n  }\n\n  async start() {\n    this.pool = createPool(this.config)\n    const data = await this.query<any[]>('SELECT TABLE_NAME, COLUMN_NAME from information_schema.columns WHERE TABLE_SCHEMA = ?', [this.config.database])\n    for (const { TABLE_NAME, COLUMN_NAME } of data) {\n      (this.columns[TABLE_NAME] ||= []).push(COLUMN_NAME)\n    }\n\n    for (const name in Koishi.Tables.config) {\n      const cols = this.getColDefs(name)\n      if (!this.columns[name]) {\n        logger.info('auto creating table %c', name)\n        await this.query(`CREATE TABLE ?? (${cols.join(',')}) COLLATE = ?`, [name, this.config.charset])\n      } else if (cols.length) {\n        logger.info('auto updating table %c', name)\n        await this.query(`ALTER TABLE ?? ${cols.map(def => 'ADD ' + def).join(',')}`, [name])\n      }\n    }\n  }\n\n  joinKeys = (keys: readonly string[]) => {\n    return keys ? keys.map(key => key.includes('`') ? key : `\\`${key}\\``).join(',') : '*'\n  }\n\n  $in = (table: TableType, key: string, values: readonly any[]) => {\n    return `${this.escapeId(key)} IN (${values.map(val => this.escape(val, table, key)).join(', ')})`\n  }\n\n  formatValues = (table: string, data: object, keys: readonly string[]) => {\n    return keys.map((key) => {\n      if (typeof data[key] !== 'object' || types.isDate(data[key])) return data[key]\n      return stringify(data[key], table as never, key)\n    })\n  }\n\n  query<T extends {}>(source: string, values?: any): Promise<T>\n  query<T extends {}>(source: string[], values?: any): Promise<T>\n  async query<T extends {}>(source: string | string[], values?: any): Promise<T> {\n    if (Array.isArray(source)) {\n      if (this.config.multipleStatements) {\n        return this.query(source.join(';'), values)\n      } else {\n        const result: any = []\n        for (const sql of source) {\n          result.push(await this.query(sql, values))\n        }\n        return result\n      }\n    }\n\n    const error = new Error()\n    return new Promise((resolve, reject) => {\n      const sql = format(source, values)\n      logger.debug('[sql]', sql)\n      this.pool.query(sql, (err, results) => {\n        if (!err) return resolve(results)\n        logger.warn(sql)\n        err.stack = err.message + error.stack.slice(7)\n        if (err.code === 'ER_DUP_ENTRY') {\n          err[Symbol.for('koishi.error-type')] = 'duplicate-entry'\n        }\n        reject(err)\n      })\n    })\n  }\n\n  select<T extends {}>(table: string, fields: readonly (string & keyof T)[], conditional?: string, values?: readonly any[]): Promise<T[]>\n  select(table: string, fields: string[], conditional?: string, values: readonly any[] = []) {\n    logger.debug(`[select] ${table}: ${fields ? fields.join(', ') : '*'}`)\n    const sql = 'SELECT '\n      + this.joinKeys(fields)\n      + (table.includes('.') ? `FROM ${table}` : ' FROM `' + table + `\\` _${table}`)\n      + (conditional ? ' WHERE ' + conditional : '')\n    return this.query(sql, values)\n  }\n\n  async count<K extends TableType>(table: K, conditional?: string) {\n    const [{ 'COUNT(*)': count }] = await this.query(`SELECT COUNT(*) FROM ?? ${conditional ? 'WHERE ' + conditional : ''}`, [table])\n    return count as number\n  }\n\n  stop() {\n    this.pool.end()\n  }\n}\n\nMysqlDatabase.prototype.escape = escape\nMysqlDatabase.prototype.escapeId = escapeId\n\nnamespace MysqlDatabase {\n  type Declarations = {\n    [T in TableType]?: {\n      [K in keyof Tables[T]]?: string | (() => string) | Domain<Tables[T][K]>\n    }\n  }\n\n  /**\n   * @deprecated use `import('koishi-core').Field` instead\n   */\n  export const tables: Declarations = {\n    user: {},\n    channel: {},\n  }\n\n  type FieldInfo = Parameters<Exclude<TypeCast, boolean>>[0]\n\n  export interface Domain<T = any> {\n    definition: string\n    parse(source: FieldInfo): T\n    stringify(value: T): string\n  }\n\n  /**\n   * @deprecated use `import('koishi-core').Field` instead\n   */\n  export namespace Domain {\n    export function definition(domain: string | Domain) {\n      return typeof domain === 'string' ? domain : domain.definition\n    }\n\n    export class String implements Domain<string> {\n      constructor(public definition = 'TEXT') {}\n\n      parse(field: FieldInfo) {\n        return field.string()\n      }\n\n      stringify(value: any) {\n        return value\n      }\n    }\n\n    export class Array implements Domain<string[]> {\n      constructor(public definition = 'TEXT') {}\n\n      parse(field: FieldInfo) {\n        const source = field.string()\n        return source ? source.split(',') : []\n      }\n\n      stringify(value: string[]) {\n        return value.join(',')\n      }\n    }\n\n    export class Json implements Domain {\n      // mysql does not support text column with default value\n      constructor(public definition = 'text', private defaultValue?: any) {}\n\n      parse(field: FieldInfo) {\n        return JSON.parse(field.string()) || this.defaultValue\n      }\n\n      stringify(value: any) {\n        return JSON.stringify(value)\n      }\n    }\n  }\n}\n\nexport default MysqlDatabase\n"],
  "mappings": "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",
  "names": []
}

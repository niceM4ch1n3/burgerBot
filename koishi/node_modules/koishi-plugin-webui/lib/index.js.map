{
  "version": 3,
  "sources": ["../src/index.ts", "../src/server.ts", "../src/payload/awesome.ts", "../src/payload/registry.ts", "../src/payload/meta.ts", "../src/payload/profile.ts", "../src/payload/stats.ts", "../src/database/mongo.ts", "../src/database/mysql.ts"],
  "sourcesContent": ["import { Context, Tables } from 'koishi-core'\nimport { template, Time } from 'koishi-utils'\nimport { Synchronizer } from './payload/stats'\nimport { WebServer, Config } from './server'\nimport Meta from './payload/meta'\n\nimport './database/mongo'\nimport './database/mysql'\n\nexport * from './server'\n\nexport type Activity = Record<number, number>\n\ndeclare module 'koishi-core' {\n  namespace Context {\n    interface Delegates {\n      webui: WebServer\n    }\n  }\n\n  interface Database {\n    getStats(): Promise<Meta.Stats>\n    createSynchronizer(): Synchronizer\n  }\n\n  interface Session {\n    _sendType?: 'command' | 'dialogue'\n  }\n\n  interface Bot {\n    messageSent: number[]\n    messageReceived: number[]\n  }\n\n  interface EventMap {\n    'status/tick'(): void\n  }\n\n  interface User {\n    lastCall: Date\n    password: string\n    token: string\n    expire: number\n  }\n\n  interface Channel {\n    name: string\n    activity: Activity\n  }\n\n  namespace Plugin {\n    interface Packages {\n      'koishi-plugin-webui': typeof import('.')\n    }\n  }\n}\n\nContext.delegate('webui')\n\nTables.extend('user', {\n  fields: {\n    lastCall: 'timestamp',\n    password: 'string(63)',\n    token: 'string(63)',\n    expire: 'unsigned(20)',\n  },\n})\n\nTables.extend('channel', {\n  fields: {\n    name: 'string(50)',\n    activity: 'json',\n  },\n})\n\ntemplate.set('status', {\n  // eslint-disable-next-line no-template-curly-in-string\n  bot: '{{ username }}：{{ code ? `无法连接` : `工作中（${currentRate[0]}/min）` }}',\n  output: [\n    '{{ bots }}',\n    '==========',\n    'CPU 使用率：{{ (cpu[0] * 100).toFixed() }}% / {{ (cpu[1] * 100).toFixed() }}%',\n    '内存使用率：{{ (memory[0] * 100).toFixed() }}% / {{ (memory[1] * 100).toFixed() }}%',\n  ].join('\\n'),\n})\n\nconst defaultConfig: Config = {\n  apiPath: '/status',\n  uiPath: '/console',\n  selfUrl: '',\n  title: 'Koishi 控制台',\n  expiration: Time.week,\n  tickInterval: Time.second * 5,\n  statsInternal: Time.minute * 10,\n  metaInterval: Time.hour,\n}\n\nexport const name = 'webui'\n\nexport function apply(ctx: Context, config: Config = {}) {\n  config = Object.assign(defaultConfig, config)\n\n  ctx.webui = new WebServer(ctx, config)\n\n  ctx.router.get(config.apiPath, async (ctx) => {\n    ctx.set('Access-Control-Allow-Origin', '*')\n    ctx.body = await getStatus()\n  })\n\n  ctx.command('status', '查看机器人运行状态')\n    .shortcut('你的状态', { prefix: true })\n    .shortcut('你的状况', { prefix: true })\n    .shortcut('运行情况', { prefix: true })\n    .shortcut('运行状态', { prefix: true })\n    .option('all', '-a  查看全部平台')\n    .action(async ({ session, options }) => {\n      const status = await getStatus()\n      if (!options.all) {\n        status.bots = status.bots.filter(bot => bot.platform === session.platform)\n      }\n      status.bots.toString = () => {\n        return status.bots.map(bot => {\n          let output = template('status.bot', bot)\n          if (options.all) output = `[${bot.platform}] ` + output\n          return output\n        }).join('\\n')\n      }\n      return template('status.output', status)\n    })\n\n  async function getStatus() {\n    const [profile, meta] = await Promise.all([\n      ctx.webui.sources.profile.get(),\n      ctx.webui.sources.meta.get(),\n    ])\n    return { ...profile, ...meta }\n  }\n}\n", "import { Adapter, App, Context, Logger, noop, omit, pick, Random, remove, Time, User, version } from 'koishi-core'\nimport { resolve, extname } from 'path'\nimport { promises as fs, Stats, createReadStream } from 'fs'\nimport Awesome from './payload/awesome'\nimport Registry from './payload/registry'\nimport Meta from './payload/meta'\nimport Profile from './payload/profile'\nimport Statistics from './payload/stats'\nimport WebSocket from 'ws'\nimport type * as Vite from 'vite'\nimport type PluginVue from '@vitejs/plugin-vue'\n\nexport { Awesome, Registry, Meta, Profile, Statistics }\n\ninterface BaseConfig {\n  title?: string\n  devMode?: boolean\n  uiPath?: string\n}\n\nexport interface Config extends BaseConfig, Profile.Config, Meta.Config, Registry.Config, Statistics.Config {\n  title?: string\n  selfUrl?: string\n  apiPath?: string\n  expiration?: number\n}\n\nexport interface ClientConfig extends Required<BaseConfig> {\n  version: string\n  database: boolean\n  endpoint: string\n  extensions: string[]\n}\n\nconst logger = new Logger('webui')\nconst TOKEN_TIMEOUT = Time.minute * 10\n\nexport class SocketHandle {\n  readonly app: App\n  readonly id = Random.uuid()\n  authority: number\n\n  constructor(public readonly webui: WebServer, public socket: WebSocket) {\n    this.app = webui.app\n  }\n\n  send(type: string, body?: any) {\n    this.socket.send(JSON.stringify({ type, body }))\n  }\n\n  async validate<T extends User.Field>(id: string, token: string, fields: T[] = []) {\n    const user = await this.app.database.getUser('id', id, ['token', 'expire', 'authority', ...fields])\n    if (!user || token !== user.token || user.expire <= Date.now()) {\n      return this.send('expire')\n    }\n    this.authority = user.authority\n    return user\n  }\n}\n\nexport class WebServer extends Adapter {\n  readonly root: string\n  readonly sources: WebServer.Sources\n  readonly global: ClientConfig\n  readonly entries: Record<string, string> = {}\n  readonly handles: Record<string, SocketHandle> = {}\n  readonly states: Record<string, [string, number, SocketHandle]> = {}\n\n  private vite: Vite.ViteDevServer\n  private readonly server: WebSocket.Server\n  private readonly [Context.current]: Context\n\n  constructor(private ctx: Context, public config: Config) {\n    super(ctx.app)\n\n    const { apiPath, uiPath, devMode, selfUrl, title } = config\n    const endpoint = selfUrl + apiPath\n    this.global = { title, uiPath, endpoint, devMode, extensions: [], database: false, version }\n    this.root = resolve(__dirname, '..', devMode ? 'client' : 'dist')\n\n    this.server = new WebSocket.Server({\n      path: apiPath,\n      server: ctx.app._httpServer,\n    })\n\n    this.sources = {\n      awesome: new Awesome(ctx, config),\n      profile: new Profile(ctx, config),\n      meta: new Meta(ctx, config),\n      registry: new Registry(ctx, config),\n      stats: new Statistics(ctx, config),\n    }\n\n    ctx.all().private().middleware(async (session, next) => {\n      const state = this.states[session.uid]\n      if (state && state[0] === session.content) {\n        const user = await session.observeUser(['id', 'name', 'authority', 'token', 'expire'])\n        user.token = Random.uuid()\n        user.expire = Date.now() + config.expiration\n        return state[2].send('user', user)\n      }\n      return next()\n    }, true)\n\n    ctx.on('connect', () => this.start())\n    ctx.before('disconnect', () => this.stop())\n\n    ctx.on('delegate/database', () => {\n      this.global.database = !!ctx.database\n    })\n  }\n\n  broadcast(type: string, body: any) {\n    if (!this?.server.clients.size) return\n    const data = JSON.stringify({ type, body })\n    this.server.clients.forEach((socket) => socket.send(data))\n  }\n\n  private triggerReload() {\n    this.global.extensions = Object.entries(this.entries).map(([name, filename]) => {\n      return this.config.devMode ? '/vite/@fs' + filename : `./${name}`\n    })\n    this.vite?.ws.send({ type: 'full-reload' })\n  }\n\n  addEntry(filename: string) {\n    const ctx = this[Context.current]\n    let { state } = ctx\n    state[Registry.webExtension] = true\n    while (state && !state.name) state = state.parent\n    const hash = Math.floor(Math.random() * (16 ** 8)).toString(16).padStart(8, '0')\n    const key = `${state?.name || 'entry'}-${hash}.js`\n    this.entries[key] = filename\n    this.triggerReload()\n    ctx.before('disconnect', () => {\n      delete this.entries[key]\n      this.triggerReload()\n    })\n  }\n\n  addListener(event: string, listener: WebServer.Listener) {\n    WebServer.listeners[event] = listener\n  }\n\n  async start() {\n    if (this.config.devMode) await this.createVite()\n    this.server.on('connection', this.onConnection)\n    this.serveAssets()\n  }\n\n  stop() {\n    this.server.close()\n    for (const bot of this.bots) {\n      remove(this.app.bots, bot)\n    }\n  }\n\n  private onConnection = (socket: WebSocket) => {\n    const channel = new SocketHandle(this, socket)\n    this.handles[channel.id] = channel\n\n    for (const type in this.sources) {\n      this.sources[type].get().then((body) => {\n        socket.send(JSON.stringify({ type, body }))\n      })\n    }\n\n    socket.on('close', () => {\n      delete this.handles[channel.id]\n      for (const id in this.states) {\n        if (this.states[id][2] === channel) delete this.states[id]\n      }\n    })\n\n    socket.on('message', async (data) => {\n      if (!this.ctx.database) return\n      const { type, body } = JSON.parse(data.toString())\n      const method = WebServer.listeners[type]\n      if (method) {\n        await method.call(channel, body)\n      } else {\n        logger.info(type, body)\n      }\n    })\n  }\n\n  private serveAssets() {\n    const { uiPath } = this.config\n\n    this.ctx.router.get(uiPath + '(/.+)*', async (ctx) => {\n      // add trailing slash and redirect\n      if (ctx.path === uiPath && !uiPath.endsWith('/')) {\n        return ctx.redirect(ctx.path + '/')\n      }\n      const name = ctx.path.slice(uiPath.length).replace(/^\\/+/, '')\n      const sendFile = (filename: string) => {\n        ctx.type = extname(filename)\n        return ctx.body = createReadStream(filename)\n      }\n      if (name.startsWith('assets/')) {\n        const key = name.slice(7)\n        if (this.entries[key]) return sendFile(this.entries[key])\n      }\n      const filename = resolve(this.root, name)\n      if (!filename.startsWith(this.root) && !filename.includes('node_modules')) {\n        return ctx.status = 403\n      }\n      const stats = await fs.stat(filename).catch<Stats>(noop)\n      if (stats?.isFile()) return sendFile(filename)\n      const ext = extname(filename)\n      if (ext && ext !== '.html') return ctx.status = 404\n      const template = await fs.readFile(resolve(this.root, 'index.html'), 'utf8')\n      ctx.type = 'html'\n      ctx.body = await this.transformHtml(template)\n    })\n  }\n\n  private async transformHtml(template: string) {\n    if (this.vite) template = await this.vite.transformIndexHtml(this.config.uiPath, template)\n    const headInjection = `<script>KOISHI_CONFIG = ${JSON.stringify(this.global)}</script>`\n    return template.replace('</title>', '</title>' + headInjection)\n  }\n\n  private async createVite() {\n    const { createServer } = require('vite') as typeof Vite\n    const pluginVue = require('@vitejs/plugin-vue').default as typeof PluginVue\n\n    this.vite = await createServer({\n      root: this.root,\n      base: '/vite/',\n      server: { middlewareMode: true },\n      plugins: [pluginVue()],\n      resolve: {\n        alias: {\n          '~/client': this.root,\n          '~/variables': this.root + '/index.scss',\n        },\n      },\n    })\n\n    this.ctx.router.all('/vite(/.+)+', (ctx) => new Promise((resolve) => {\n      this.vite.middlewares(ctx.req, ctx.res, resolve)\n    }))\n\n    this.ctx.before('disconnect', () => this.vite.close())\n  }\n}\n\nexport namespace WebServer {\n  export interface DataSource<T = any> {\n    get(forced?: boolean): Promise<T>\n  }\n\n  export interface Sources extends Record<string, DataSource> {\n    meta: Meta\n    awesome: Awesome\n    stats: Statistics\n    profile: Profile\n    registry: Registry\n  }\n\n  export type Listener = (this: SocketHandle, payload: any) => Promise<void>\n  export const listeners: Record<string, Listener> = {}\n\n  // builtin listeners\n\n  listeners.validate = async function ({ id, token }) {\n    await this.validate(id, token)\n  }\n\n  listeners.token = async function ({ platform, userId }) {\n    const user = await this.app.database.getUser(platform, userId, ['name'])\n    if (!user) return this.send('login', { message: '找不到此账户。' })\n    const id = `${platform}:${userId}`\n    const token = Random.uuid()\n    const expire = Date.now() + TOKEN_TIMEOUT\n    const { states } = this.app.webui\n    states[id] = [token, expire, this]\n    setTimeout(() => {\n      if (states[id]?.[1] > Date.now()) delete states[id]\n    }, TOKEN_TIMEOUT)\n    this.send('login', { token, name: user.name })\n  }\n\n  listeners.password = async function ({ id, token, password }) {\n    const user = await this.validate(id, token, ['password'])\n    if (!user || password === user.password) return\n    await this.app.database.setUser('id', id, { password })\n  }\n\n  listeners.login = async function ({ username, password }) {\n    const user = await this.app.database.getUser('name', username, ['password', 'authority', 'id', 'expire', 'token'])\n    if (!user || user.password !== password) {\n      return this.send('login', { message: '用户名或密码错误。' })\n    }\n    user.token = Random.uuid()\n    user.expire = Date.now() + this.app.webui.config.expiration\n    await this.app.database.setUser('name', username, pick(user, ['token', 'expire']))\n    this.send('user', omit(user, ['password']))\n    this.authority = user.authority\n  }\n\n  listeners.install = async function ({ id, token, name }) {\n    const user = await this.validate(id, token, ['name', 'authority'])\n    if (!user) return\n    if (user.authority < 4) return this.send('unauthorized')\n    this.webui.sources.awesome.install(name)\n  }\n\n  listeners.switch = async function ({ id, token, plugin }) {\n    const user = await this.validate(id, token, ['name', 'authority'])\n    if (!user) return\n    if (user.authority < 4) return this.send('unauthorized')\n    this.webui.sources.registry.switch(plugin)\n  }\n}\n", "import { Context, pick, version as coreVersion } from 'koishi-core'\nimport { dirname, resolve } from 'path'\nimport { existsSync, promises as fs } from 'fs'\nimport { spawn, StdioOptions } from 'child_process'\nimport { satisfies } from 'semver'\nimport axios from 'axios'\n\ninterface PackageBase {\n  name: string\n  version: string\n  description: string\n}\n\ninterface PackageJson extends PackageBase {\n  dependencies?: Record<string, string>\n  devDependencies?: Record<string, string>\n  peerDependencies?: Record<string, string>\n  optionalDependencies?: Record<string, string>\n}\n\ninterface PackageLocal extends PackageJson {\n  private?: boolean\n}\n\ninterface PackageRemote extends PackageJson {\n  dist: {\n    unpackedSize: number\n  }\n}\n\ninterface SearchResult {\n  results: any[]\n}\n\ninterface Registry extends PackageBase {\n  versions: Record<string, PackageRemote>\n}\n\nconst officialPlugins = [\n  'adventure', 'assets', 'chat', 'chess', 'common', 'dice',\n  'eval', 'github', 'image-search', 'mongo', 'mysql',\n  'puppeteer', 'schedule', 'teach', 'tools', 'webui',\n]\n\ntype Manager = 'yarn' | 'npm'\n\nconst cwd = process.cwd()\n\nfunction execute(bin: string, args: string[] = [], stdio: StdioOptions = 'inherit') {\n  // fix for #205\n  // https://stackoverflow.com/questions/43230346/error-spawn-npm-enoent\n  const child = spawn(bin + (process.platform === 'win32' ? '.cmd' : ''), args, { stdio })\n  return new Promise<number>((resolve) => {\n    child.on('close', resolve)\n  })\n}\n\nlet _managerPromise: Promise<Manager>\nasync function getManager(): Promise<Manager> {\n  if (existsSync(resolve(cwd, 'yarn.lock'))) return 'yarn'\n  if (existsSync(resolve(cwd, 'package-lock.json'))) return 'npm'\n  if (!await execute('yarn', ['--version'], 'ignore')) return 'yarn'\n  return 'npm'\n}\n\nconst installArgs: Record<Manager, string[]> = {\n  yarn: ['add'],\n  npm: ['install', '--loglevel', 'error'],\n}\n\nclass Awesome {\n  cached: Promise<Awesome.PackageData[]>\n\n  constructor(private ctx: Context, public config: Awesome.Config) {\n    ctx.router.get(config.apiPath + '/package(/.+)+', async (ctx) => {\n      const name = ctx.path.slice(config.apiPath.length + 9)\n      const { data } = await axios.get(`https://registry.npmjs.org/${name}`)\n      ctx.body = data\n      ctx.set('Access-Control-Allow-Origin', '*')\n    })\n  }\n\n  async get(forced = false) {\n    if (this.cached && !forced) return this.cached\n    return this.cached = this.getForced()\n  }\n\n  private async getForced() {\n    const _loadDep = async (filename: string, isInstalled: boolean) => {\n      do {\n        filename = dirname(filename)\n        const files = await fs.readdir(filename)\n        if (files.includes('package.json')) break\n      } while (true)\n      const data: PackageLocal = JSON.parse(await fs.readFile(filename + '/package.json', 'utf8'))\n      if (data.private) return null\n      const isWorkspace = !filename.includes('node_modules')\n      return { isWorkspace, isInstalled, ...pick(data, ['name', 'version', 'description']) }\n    }\n\n    const loadCache: Record<string, Promise<Awesome.PackageMeta>> = {}\n    const loadDep = (filename: string, isInstalled: boolean) => {\n      return loadCache[filename] ||= _loadDep(filename, isInstalled)\n    }\n\n    const [{ data }] = await Promise.all([\n      axios.get<SearchResult>('https://api.npms.io/v2/search?q=koishi-plugin+not:deprecated&size=250'),\n      Promise.all(Object.keys(require.cache).map((filename) => {\n        const { exports } = require.cache[filename]\n        if (this.ctx.app.registry.has(exports)) return loadDep(filename, true)\n      })),\n    ])\n\n    const loadExternal = (name: string) => {\n      try {\n        const filename = require.resolve(name)\n        return loadDep(filename, false)\n      } catch {}\n    }\n\n    return Promise.all(data.results.map(async (item) => {\n      const { name, version } = item.package\n      const official = officialPlugins.includes(name.slice(14))\n      const [local, { data }] = await Promise.all([\n        loadExternal(name),\n        axios.get<Registry>(`https://registry.npmjs.org/${name}`),\n      ])\n      const { dependencies = {}, peerDependencies = {}, dist } = data.versions[version]\n      const core = { ...dependencies, ...peerDependencies }['koishi-core']\n      if (!core || !satisfies(coreVersion, core)) return\n\n      return {\n        ...item.package,\n        local,\n        official,\n        size: dist.unpackedSize,\n        score: {\n          final: item.score.final,\n          ...item.score.detail,\n        },\n      } as Awesome.PackageData\n    })).then(data => data.filter(Boolean))\n  }\n\n  async install(name: string) {\n    const kind = await (_managerPromise ||= getManager())\n    const args = [...installArgs[kind], name]\n    await execute(kind, args)\n    this.ctx.webui.broadcast('awesome', await this.get(true))\n  }\n}\n\nnamespace Awesome {\n  export interface Config {\n    apiPath?: string\n  }\n\n  export interface PackageMeta extends PackageBase {\n    isWorkspace: boolean\n    isInstalled: boolean\n  }\n\n  export interface PackageData extends PackageBase {\n    local?: PackageMeta\n    official: boolean\n    size: number\n    score: {\n      final: number\n      quality: number\n      popularity: number\n      maintenance: number\n    }\n  }\n}\n\nexport default Awesome\n", "import { Context, Plugin } from 'koishi-core'\n\nfunction debounce(callback: Function, ms: number) {\n  let timer: number\n  return function () {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(callback, ms)\n  }\n}\n\nclass Registry {\n  cached: Promise<Registry.PluginData[]>\n  promise: Promise<void>\n\n  static readonly placeholder = Symbol('webui.registry.placeholder')\n  static readonly webExtension = Symbol('webui.registry.web-extension')\n\n  constructor(private ctx: Context, public config: Registry.Config) {\n    ctx.on('plugin-added', this.update)\n    ctx.on('plugin-removed', this.update)\n  }\n\n  update = debounce(async () => {\n    this.ctx.webui.broadcast('registry', await this.get(true))\n  }, 0)\n\n  async get(forced = false) {\n    if (this.cached && !forced) return this.cached\n    return this.cached = this.getForced()\n  }\n\n  private async getForced() {\n    return this.traverse(null).children\n  }\n\n  async switch(id: string) {\n    await this.promise\n    for (const [plugin, state] of this.ctx.app.registry) {\n      if (id !== state.id) continue\n      const replacer = plugin[Registry.placeholder] || {\n        name: state.name,\n        apply: Object.assign(() => {}, {\n          [Registry.placeholder]: state.plugin,\n        }),\n      }\n      this.promise = this.ctx.dispose(plugin)\n      state.context.plugin(replacer, state.config)\n      break\n    }\n  }\n\n  traverse = (plugin: Plugin): Registry.PluginData => {\n    const state = this.ctx.app.registry.get(plugin)\n    let webExtension = state[Registry.webExtension]\n    let complexity = plugin?.[Registry.placeholder] ? 0 : 1 + state.disposables.length\n    const children: Registry.PluginData[] = []\n    state.children.forEach((plugin) => {\n      const data = this.traverse(plugin)\n      complexity += data.complexity\n      webExtension ||= data.webExtension\n      if (data.name) {\n        children.push(data)\n      } else {\n        children.push(...data.children)\n      }\n    })\n    const { id, name, sideEffect } = state\n    children.sort((a, b) => a.name > b.name ? 1 : -1)\n    return { id, name, sideEffect, children, complexity, webExtension }\n  }\n}\n\nnamespace Registry {\n  export interface Config {}\n\n  export interface PluginData extends Plugin.Meta {\n    id: string\n    children: PluginData[]\n    complexity: number\n    webExtension: boolean\n  }\n}\n\nexport default Registry\n", "import { Argv, Assets, Context, noop } from 'koishi-core'\n\nclass Meta {\n  timestamp = 0\n  cached: Promise<Meta.Payload>\n  callbacks: Meta.Extension[] = []\n\n  constructor(private ctx: Context, public config: Meta.Config) {\n    this.extend(async () => ctx.assets?.stats())\n    this.extend(async () => ctx.database?.getStats())\n\n    ctx.all().on('command', ({ session }: Argv<'lastCall'>) => {\n      session.user.lastCall = new Date()\n    })\n  }\n\n  async get(): Promise<Meta.Payload> {\n    const now = Date.now()\n    if (this.timestamp > now) return this.cached\n    this.timestamp = now + this.config.metaInterval\n    return this.cached = Promise\n      .all(this.callbacks.map(cb => cb().catch(noop)))\n      .then(data => Object.assign({}, ...data))\n  }\n\n  extend(callback: Meta.Extension) {\n    this.timestamp = 0\n    this.callbacks.push(callback)\n  }\n}\n\nnamespace Meta {\n  export interface Config {\n    metaInterval?: number\n  }\n\n  export interface Stats {\n    allUsers: number\n    activeUsers: number\n    allGroups: number\n    activeGroups: number\n    storageSize: number\n  }\n\n  export interface Payload extends Stats, Assets.Stats {}\n\n  export type Extension = () => Promise<Partial<Payload>>\n}\n\nexport default Meta\n", "import { Bot, Context, Platform } from 'koishi-core'\nimport { cpus } from 'os'\nimport { mem } from 'systeminformation'\n\nexport type LoadRate = [app: number, total: number]\nexport type MessageRate = [send: number, receive: number]\n\nlet usage = getCpuUsage()\nlet appRate: number\nlet usedRate: number\n\nasync function memoryRate(): Promise<LoadRate> {\n  const { total, active } = await mem()\n  return [process.memoryUsage().rss / total, active / total]\n}\n\nfunction getCpuUsage() {\n  let totalIdle = 0, totalTick = 0\n  const cpuInfo = cpus()\n  const usage = process.cpuUsage().user\n\n  for (const cpu of cpuInfo) {\n    for (const type in cpu.times) {\n      totalTick += cpu.times[type]\n    }\n    totalIdle += cpu.times.idle\n  }\n\n  return {\n    // microsecond values\n    app: usage / 1000,\n    // use total value (do not know how to get the cpu on which the koishi is running)\n    used: (totalTick - totalIdle) / cpuInfo.length,\n    total: totalTick / cpuInfo.length,\n  }\n}\n\nfunction updateCpuUsage() {\n  const newUsage = getCpuUsage()\n  const totalDifference = newUsage.total - usage.total\n  appRate = (newUsage.app - usage.app) / totalDifference\n  usedRate = (newUsage.used - usage.used) / totalDifference\n  usage = newUsage\n}\n\nexport interface BotData {\n  username: string\n  selfId: string\n  platform: Platform\n  code: Bot.Status\n  currentRate: MessageRate\n}\n\nfunction accumulate(record: number[]) {\n  return record.slice(1).reduce((prev, curr) => prev + curr, 0)\n}\n\nexport async function BotData(bot: Bot) {\n  return {\n    platform: bot.platform,\n    selfId: bot.selfId,\n    username: bot.username,\n    code: await bot.getStatus(),\n    currentRate: [accumulate(bot.messageSent), accumulate(bot.messageReceived)],\n  } as BotData\n}\n\nclass Profile {\n  cached: Profile.Payload\n\n  constructor(private ctx: Context, config: Profile.Config) {\n    this.apply(ctx, config)\n\n    ctx.on('status/tick', async () => {\n      this.ctx.webui.broadcast('profile', await this.get(true))\n    })\n  }\n\n  async get(forced = false) {\n    if (this.cached && !forced) return this.cached\n    const [memory, bots] = await Promise.all([\n      memoryRate(),\n      Promise.all(this.ctx.bots.filter(bot => bot.platform !== 'web').map(BotData)),\n    ])\n    const cpu: LoadRate = [appRate, usedRate]\n    return { bots, memory, cpu }\n  }\n\n  static initBot(bot: Bot) {\n    bot.messageSent = new Array(61).fill(0)\n    bot.messageReceived = new Array(61).fill(0)\n  }\n\n  private apply(ctx: Context, config: Profile.Config = {}) {\n    const { tickInterval } = config\n\n    ctx.all().before('send', (session) => {\n      session.bot.messageSent[0] += 1\n    })\n\n    ctx.all().on('message', (session) => {\n      session.bot.messageReceived[0] += 1\n    })\n\n    ctx.on('connect', async () => {\n      ctx.bots.forEach(Profile.initBot)\n\n      ctx.setInterval(() => {\n        updateCpuUsage()\n        ctx.bots.forEach(({ messageSent, messageReceived }) => {\n          messageSent.unshift(0)\n          messageSent.splice(-1, 1)\n          messageReceived.unshift(0)\n          messageReceived.splice(-1, 1)\n        })\n        ctx.emit('status/tick')\n      }, tickInterval)\n    })\n  }\n}\n\nnamespace Profile {\n  export interface Config {\n    tickInterval?: number\n  }\n\n  export interface Payload {\n    bots: BotData[]\n    memory: LoadRate\n    cpu: LoadRate\n  }\n}\n\nexport default Profile\n", "import { Context, Channel, noop, Session, Bot, Platform, Time } from 'koishi-core'\nimport {} from 'koishi'\n\nexport type StatRecord = Record<string, number>\n\nexport interface Synchronizer {\n  groups: StatRecord\n  daily: Record<Synchronizer.DailyField, StatRecord>\n  hourly: Record<Synchronizer.HourlyField, number>\n  longterm: Record<Synchronizer.LongtermField, number>\n  addDaily(field: Synchronizer.DailyField, key: string | number): void\n  upload(date: Date): Promise<void>\n  download(): Promise<Synchronizer.Data>\n}\n\nexport namespace Synchronizer {\n  export type DailyField = typeof dailyFields[number]\n  export const dailyFields = [\n    'command', 'dialogue', 'botSend', 'botReceive', 'group',\n  ] as const\n\n  export type HourlyField = typeof hourlyFields[number]\n  export const hourlyFields = [\n    'total', 'group', 'private', 'command', 'dialogue',\n  ] as const\n\n  export type LongtermField = typeof longtermFields[number]\n  export const longtermFields = [\n    'message',\n  ] as const\n\n  export interface Data {\n    extension?: Statistics.Payload\n    groups: Pick<Channel, 'id' | 'name' | 'assignee'>[]\n    daily: Record<DailyField, StatRecord>[]\n    hourly: ({ time: Date } & Record<HourlyField, number>)[]\n    longterm: ({ time: Date } & Record<LongtermField, number>)[]\n  }\n}\n\nexport const RECENT_LENGTH = 5\n\nexport function average(stats: {}[]) {\n  const result: StatRecord = {}\n  stats.slice(0, RECENT_LENGTH).forEach((stat) => {\n    for (const key in stat) {\n      if (typeof stat[key] !== 'number') continue\n      result[key] = (result[key] || 0) + stat[key]\n    }\n  })\n  for (const key in result) {\n    result[key] = +(result[key] / RECENT_LENGTH).toFixed(1)\n  }\n  return result\n}\n\ninterface GroupData {\n  name: string\n  platform: Platform\n  assignee: string\n  value: number\n  last: number\n}\n\nconst send = Session.prototype.send\nSession.prototype.send = function (this: Session, ...args) {\n  if (args[0] && this._sendType && this.app.webui) {\n    this.app.webui.sources.stats.sync.hourly[this._sendType] += 1\n  }\n  return send.apply(this, args)\n}\n\nconst customTag = Symbol('custom-send')\nSession.prototype.send[customTag] = send\n\nclass Statistics {\n  sync: Synchronizer\n  lastUpdate = new Date()\n  updateHour = this.lastUpdate.getHours()\n  callbacks: Statistics.Extension[] = []\n  cachedDate: number\n  cachedData: Promise<Statistics.Payload>\n  average = average\n\n  constructor(private ctx: Context, public config: Statistics.Config = {}) {\n    ctx.on('exit', () => this.upload(true))\n\n    ctx.on('delegate/database', () => {\n      this.sync = ctx.database.createSynchronizer()\n    })\n\n    ctx.before('disconnect', async () => {\n      // rollback to default implementation to prevent infinite call stack\n      if (Session.prototype.send[customTag]) {\n        Session.prototype.send = Session.prototype.send[customTag]\n      }\n      await this.upload(true)\n    })\n\n    ctx = ctx.select('database')\n\n    ctx.before('command', ({ command, session }) => {\n      if (command.parent?.name !== 'test') {\n        const [name] = command.name.split('.', 1)\n        this.sync.addDaily('command', name)\n        this.upload()\n      }\n      session._sendType = 'command'\n    })\n\n    const updateSendStats = async (session: Session) => {\n      this.sync.hourly.total += 1\n      this.sync.hourly[session.subtype] += 1\n      this.sync.longterm.message += 1\n      this.sync.addDaily('botSend', session.sid)\n      if (session.subtype === 'group') {\n        this.sync.addDaily('group', session.gid)\n        this.sync.groups[session.gid] = (this.sync.groups[session.gid] || 0) + 1\n      }\n      this.upload()\n    }\n\n    ctx.on('message', (session) => {\n      this.sync.addDaily('botReceive', session.sid)\n    })\n\n    ctx.on('before-send', (session) => {\n      updateSendStats(session)\n    })\n\n    this.extend(this.extendBasic)\n    this.extend(this.extendGroup)\n  }\n\n  async upload(forced = false) {\n    const date = new Date()\n    const dateHour = date.getHours()\n    if (forced || +date - +this.lastUpdate > this.config.statsInternal || dateHour !== this.updateHour) {\n      this.lastUpdate = date\n      this.updateHour = dateHour\n      await this.sync?.upload(date)\n    }\n  }\n\n  extend(callback: Statistics.Extension) {\n    this.callbacks.push(callback)\n  }\n\n  private extendBasic: Statistics.Extension = async (payload, data) => {\n    // history\n    payload.history = {}\n    data.longterm.forEach((stat) => {\n      payload.history[stat.time.toLocaleDateString('zh-CN')] = stat.message\n    })\n\n    // command & bot\n    payload.commands = average(data.daily.map(data => data.command))\n    payload.botSend = average(data.daily.map(stat => stat.botSend))\n    payload.botReceive = average(data.daily.map(stat => stat.botReceive))\n\n    // hours\n    payload.hours = new Array(24).fill(0).map((_, index) => {\n      return average(data.hourly.filter(s => s.time.getHours() === index))\n    })\n  }\n\n  private extendGroup: Statistics.Extension = async (payload, data) => {\n    const groupSet = new Set<string>()\n    payload.groups = []\n    const groupMap = Object.fromEntries(data.groups.map(g => [g.id, g]))\n    const messageMap = average(data.daily.map(data => data.group))\n    const updateList: Pick<Channel, 'id' | 'name'>[] = []\n\n    async function getGroupInfo(bot: Bot) {\n      const { platform } = bot\n      const groups = await bot.getGroupList()\n      for (const { groupId, groupName: name } of groups) {\n        const id = `${bot.platform}:${groupId}`\n        if (!messageMap[id] || !groupMap[id] || groupSet.has(id)) continue\n        groupSet.add(id)\n        const { name: oldName, assignee } = groupMap[id]\n        if (name !== oldName) updateList.push({ id, name })\n        payload.groups.push({\n          name,\n          platform,\n          assignee,\n          value: messageMap[id],\n          last: data.daily[0].group[id] || 0,\n        })\n      }\n    }\n\n    await Promise.all(this.ctx.bots.map(bot => getGroupInfo(bot).catch(noop)))\n\n    for (const key in messageMap) {\n      if (!groupSet.has(key) && groupMap[key]) {\n        const { name, assignee } = groupMap[key]\n        const [platform] = key.split(':') as [never]\n        payload.groups.push({\n          platform,\n          name: name || key,\n          value: messageMap[key],\n          last: data.daily[0].group[key] || 0,\n          assignee: this.ctx.bots[`${platform}:${assignee}`]?.selfId || '',\n        })\n      }\n    }\n\n    await this.ctx.database.update('channel', updateList)\n  }\n\n  async download() {\n    const data = await this.sync.download()\n    const payload = {} as Statistics.Payload\n    await Promise.all(this.callbacks.map(cb => cb(payload, data)))\n    return payload\n  }\n\n  async get() {\n    if (!this.sync) return\n    const date = new Date()\n    const dateNumber = Time.getDateNumber(date, date.getTimezoneOffset())\n    if (dateNumber !== this.cachedDate) {\n      this.cachedData = this.download()\n      this.cachedDate = dateNumber\n    }\n    return this.cachedData\n  }\n}\n\nnamespace Statistics {\n  export interface Payload {\n    history: StatRecord\n    commands: StatRecord\n    hours: StatRecord[]\n    groups: GroupData[]\n    botSend: StatRecord\n    botReceive: StatRecord\n  }\n\n  export interface Config {\n    statsInternal?: number\n  }\n\n  export type Extension = (payload: Payload, data: Synchronizer.Data) => Promise<void>\n}\n\nexport default Statistics\n", "import { Database, Logger, Time } from 'koishi-core'\nimport { RECENT_LENGTH, StatRecord, Synchronizer } from '../payload/stats'\nimport type MongoDatabase from 'koishi-plugin-mongo'\n\nconst logger = new Logger('status')\n\ndeclare module 'koishi-plugin-mongo' {\n  interface Tables {\n    'plugin-status': any\n  }\n}\n\nclass MongoSynchronizer implements Synchronizer {\n  groups: StatRecord\n  daily: any\n  hourly: Record<Synchronizer.HourlyField, number>\n  longterm: Record<Synchronizer.LongtermField, number>\n\n  constructor(private db: MongoDatabase) {\n    this.reset()\n  }\n\n  reset() {\n    this.hourly = Object.fromEntries(Synchronizer.hourlyFields.map(i => [i, 0])) as any\n    this.daily = {}\n    this.longterm = Object.fromEntries(Synchronizer.longtermFields.map(i => [i, 0])) as any\n    this.groups = {}\n  }\n\n  addDaily(field: Synchronizer.DailyField, key: string | number) {\n    if (!this.daily[field]) this.daily[field] = {}\n    const stat: Record<string, number> = this.daily[field]\n    stat[key] = (stat[key] || 0) + 1\n  }\n\n  async upload(date: Date): Promise<void> {\n    logger.debug(this.hourly, this.daily, this.longterm, this.groups)\n    const coll = this.db.collection('plugin-status')\n    const _date = new Date(date)\n    _date.setMinutes(0)\n    _date.setSeconds(0)\n    _date.setMilliseconds(0)\n    await coll.updateOne({ type: 'hourly', time: _date }, { $inc: this.hourly }, { upsert: true })\n    _date.setHours(0)\n    const $inc = {}\n    for (const key in this.daily) {\n      for (const subkey in this.daily[key]) {\n        $inc[`${key}.${subkey}`] = this.daily[key][subkey]\n      }\n    }\n    if (Object.keys($inc).length) await coll.updateOne({ type: 'daily', time: _date }, { $inc }, { upsert: true })\n    await coll.updateOne({ type: 'longterm', time: _date }, { $inc: this.longterm }, { upsert: true })\n    for (const id in this.groups) {\n      await this.db.channel.updateOne({ id }, { $inc: { ['activity.' + Time.getDateNumber(date)]: this.groups[id] } } as any)\n    }\n    this.reset()\n    logger.debug('stats updated')\n  }\n\n  async download() {\n    const time = { $lt: new Date() }\n    const coll = this.db.collection('plugin-status')\n    const hourly = await coll.find({ type: 'hourly', time }).sort({ time: -1 }).limit(24 * RECENT_LENGTH).toArray()\n    const daily = await coll.find({ type: 'daily', time }).sort({ time: -1 }).limit(RECENT_LENGTH).toArray()\n    const longterm = await coll.find({ type: 'longterm', time }).sort({ time: -1 }).toArray()\n    const groups = await this.db.channel.find({}).project({ type: 1, pid: 1, name: 1, assignee: 1 })\n      .map(data => ({ ...data, id: `${data.type}:${data.pid}` })).toArray()\n    return { daily, hourly, longterm, groups }\n  }\n}\n\nDatabase.extend('koishi-plugin-mongo', {\n  async getStats() {\n    const $gt = new Date(new Date().getTime() - 1000 * 3600 * 24)\n    const [allGroups, activeGroups, allUsers, activeUsers, { storageSize }] = await Promise.all([\n      this.channel.countDocuments(),\n      this.channel.find({ assignee: { $ne: null } }).count(),\n      this.user.countDocuments(),\n      this.user.find({ lastCall: { $gt } }).count(),\n      this.mongo.db.stats(),\n    ])\n    return { allGroups, activeGroups, allUsers, activeUsers, storageSize }\n  },\n\n  createSynchronizer() {\n    return new MongoSynchronizer(this)\n  },\n})\n", "import { Database, Logger, Tables, Time } from 'koishi-core'\nimport { StatRecord, Synchronizer, RECENT_LENGTH } from '../payload/stats'\nimport type MysqlDatabase from 'koishi-plugin-mysql'\n\nconst logger = new Logger('status')\n\nfunction joinKeys(keys: readonly string[]) {\n  return keys.map(key => `\\`${key}\\``).join(',')\n}\n\nabstract class Stat<K extends string, V> {\n  public data = {} as Record<K, V>\n  private key: string = null\n\n  constructor(private table: string, private fields: readonly K[], private preserve: boolean) {\n    this.clear()\n  }\n\n  protected abstract setup(): V\n  protected abstract create(value: V): string\n  protected abstract update(key: string, value: V): string\n\n  private clear() {\n    for (const key of this.fields) {\n      this.data[key] = this.setup()\n    }\n  }\n\n  synchronize(date: string, sqls: string[]) {\n    const updates: string[] = []\n    for (const name in this.data) {\n      if (!this.fields.includes(name)) {\n        logger.warn(new Error(`unknown key \"${name}\" in stats table \"${this.table}\"`))\n        delete this.data[name]\n        continue\n      }\n      const update = this.update(name, this.data[name])\n      if (update) updates.push(update)\n    }\n    if (!updates.length) return\n\n    logger.debug(this.table, this.data)\n    if (date === this.key) {\n      sqls.push(`UPDATE \\`${this.table}\\` SET ${updates.join(', ')} WHERE \\`time\\` = \"${date}\"`)\n    } else {\n      this.key = date\n      sqls.push(`\\\nINSERT INTO \\`${this.table}\\` (\\`time\\`, ${joinKeys(Object.keys(this.data))}) \\\nVALUES (\"${date}\", ${Object.values(this.data).map(this.create).join(', ')}) \\\nON DUPLICATE KEY UPDATE ${updates.join(', ')}`)\n    }\n    if (!this.preserve) sqls.push(`DELETE FROM \\`${this.table}\\` WHERE datediff(\"${date}\", \\`time\\`) > 10`)\n    this.clear()\n  }\n}\n\nnamespace Stat {\n  export class Recorded<K extends string> extends Stat<K, StatRecord> {\n    constructor(table: string, fields: readonly K[], preserve: boolean) {\n      super(table, fields, preserve)\n      Tables.extend(table as any, { primary: 'time' })\n      Database.extend('koishi-plugin-mysql', ({ tables, Domain }) => {\n        tables[table] = Object.fromEntries(fields.map(key => [key, new Domain.Json()]))\n        tables[table].time = 'datetime'\n      })\n    }\n\n    setup() {\n      return {}\n    }\n\n    create(value: StatRecord) {\n      return `JSON_OBJECT(${Object.entries(value).map(([key, value]) => `'${key}', ${value}`).join(', ')})`\n    }\n\n    update(name: string, value: StatRecord) {\n      const entries = Object.entries(value)\n      if (!entries.length) return\n      return `\\`${name}\\` = JSON_SET(\\`${name}\\`, ${entries.map(([key, value]) => {\n        return `'$.\"${key}\"', IFNULL(JSON_EXTRACT(\\`${name}\\`, '$.\"${key}\"'), 0) + ${value}`\n      }).join(', ')})`\n    }\n  }\n\n  export class Numerical<K extends string> extends Stat<K, number> {\n    constructor(table: string, fields: readonly K[], preserve: boolean) {\n      super(table, fields, preserve)\n      Tables.extend(table as any, { primary: 'time' })\n      Database.extend('koishi-plugin-mysql', ({ tables }) => {\n        tables[table] = Object.fromEntries(fields.map(key => [key, 'int unsigned']))\n        tables[table].time = 'datetime'\n      })\n    }\n\n    setup() {\n      return 0\n    }\n\n    create(value: number) {\n      return '' + value\n    }\n\n    update(key: string, value: number) {\n      if (!value) return\n      return `\\`${key}\\` = \\`${key}\\` + ${value}`\n    }\n  }\n}\n\nclass MysqlSynchronizer implements Synchronizer {\n  private _daily = new Stat.Recorded('stats_daily', Synchronizer.dailyFields, false)\n  private _hourly = new Stat.Numerical('stats_hourly', Synchronizer.hourlyFields, false)\n  private _longterm = new Stat.Numerical('stats_longterm', Synchronizer.longtermFields, true)\n\n  groups: StatRecord = {}\n  daily = this._daily.data\n  hourly = this._hourly.data\n  longterm = this._longterm.data\n\n  constructor(private db: MysqlDatabase) {}\n\n  addDaily(field: Synchronizer.DailyField, key: string | number) {\n    const stat: Record<string, number> = this._daily.data[field]\n    stat[key] = (stat[key] || 0) + 1\n  }\n\n  async upload(date: Date): Promise<void> {\n    const dateString = date.toLocaleDateString('zh-CN')\n    const hourString = `${dateString}-${date.getHours()}:00`\n    const sqls: string[] = []\n    this._hourly.synchronize(hourString, sqls)\n    this._daily.synchronize(dateString, sqls)\n    this._longterm.synchronize(dateString, sqls)\n    for (const id in this.groups) {\n      const update = Stat.Recorded.prototype.update('activity', { [Time.getDateNumber(date)]: this.groups[id] })\n      sqls.push(`UPDATE \\`channel\\` SET ${update} WHERE \\`id\\` = '${id}'`)\n      delete this.groups[id]\n    }\n    if (!sqls.length) return\n    logger.debug('stats updated')\n    await this.db.query(sqls)\n  }\n\n  async download() {\n    const [daily, hourly, longterm, groups] = await this.db.query([\n      'SELECT * FROM `stats_daily` WHERE `time` < CURRENT_TIMESTAMP ORDER BY `time` DESC LIMIT ?',\n      'SELECT * FROM `stats_hourly` WHERE `time` < CURRENT_TIMESTAMP ORDER BY `time` DESC LIMIT ?',\n      'SELECT * FROM `stats_longterm` WHERE `time` < CURRENT_TIMESTAMP ORDER BY `time` DESC',\n      'SELECT `id`, `name`, `assignee` FROM `channel`',\n    ], [RECENT_LENGTH, 24 * RECENT_LENGTH])\n    return { daily, hourly, longterm, groups }\n  }\n}\n\nDatabase.extend('koishi-plugin-mysql', {\n  async getStats() {\n    const [[{ activeUsers }], [{ allUsers }], [{ activeGroups }], [{ allGroups }], [{ storageSize }]] = await this.query([\n      'SELECT COUNT(*) as activeUsers FROM `user` WHERE CURRENT_TIMESTAMP() - `lastCall` < 1000 * 3600 * 24',\n      'SELECT COUNT(*) as allUsers FROM `user`',\n      'SELECT COUNT(*) as activeGroups FROM `channel` WHERE `assignee`',\n      'SELECT COUNT(*) as allGroups FROM `channel`',\n      'SELECT SUM(DATA_LENGTH) as storageSize from information_schema.TABLES',\n    ])\n    return { activeUsers, allUsers, activeGroups, allGroups, storageSize }\n  },\n\n  createSynchronizer() {\n    return new MysqlSynchronizer(this)\n  },\n})\n"],
  "mappings": "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",
  "names": []
}
